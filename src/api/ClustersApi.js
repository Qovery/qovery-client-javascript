/**
 * Qovery API
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Cluster from '../model/Cluster';
import ClusterAdvancedSettings from '../model/ClusterAdvancedSettings';
import ClusterCloudProviderInfo from '../model/ClusterCloudProviderInfo';
import ClusterCloudProviderInfoRequest from '../model/ClusterCloudProviderInfoRequest';
import ClusterDeleteMode from '../model/ClusterDeleteMode';
import ClusterLogsResponseList from '../model/ClusterLogsResponseList';
import ClusterReadinessStatus from '../model/ClusterReadinessStatus';
import ClusterRequest from '../model/ClusterRequest';
import ClusterResponseList from '../model/ClusterResponseList';
import ClusterRoutingTable from '../model/ClusterRoutingTable';
import ClusterRoutingTableRequest from '../model/ClusterRoutingTableRequest';
import ClusterStatus from '../model/ClusterStatus';
import ClusterStatusGet from '../model/ClusterStatusGet';
import ClusterStatusResponseList from '../model/ClusterStatusResponseList';

/**
* Clusters service.
* @module api/ClustersApi
* @version $(grep 'version' _build/openapi.yaml | head -1 | tr ':' '\n' | tail -1 | tr -d ' ')
*/
export default class ClustersApi {

    /**
    * Constructs a new ClustersApi. 
    * @alias module:api/ClustersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCluster operation.
     * @callback module:api/ClustersApi~createClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cluster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a cluster
     * @param {String} organizationId Organization ID
     * @param {Object} opts Optional parameters
     * @param {module:model/ClusterRequest} opts.clusterRequest 
     * @param {module:api/ClustersApi~createClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cluster}
     */
    createCluster(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['clusterRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createCluster");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Cluster;
      return this.apiClient.callApi(
        '/organization/{organizationId}/cluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCluster operation.
     * @callback module:api/ClustersApi~deleteClusterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a cluster
     * @param {String} organizationId Organization ID
     * @param {String} clusterId Cluster ID
     * @param {Object} opts Optional parameters
     * @param {module:model/ClusterDeleteMode} opts.deleteMode 
     * @param {module:api/ClustersApi~deleteClusterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCluster(organizationId, clusterId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteCluster");
      }
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling deleteCluster");
      }

      let pathParams = {
        'organizationId': organizationId,
        'clusterId': clusterId
      };
      let queryParams = {
        'deleteMode': opts['deleteMode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organization/{organizationId}/cluster/{clusterId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deployCluster operation.
     * @callback module:api/ClustersApi~deployClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploy a cluster
     * allows to deploy a cluster
     * @param {String} organizationId Organization ID
     * @param {String} clusterId Cluster ID
     * @param {module:api/ClustersApi~deployClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterStatus}
     */
    deployCluster(organizationId, clusterId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deployCluster");
      }
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling deployCluster");
      }

      let pathParams = {
        'organizationId': organizationId,
        'clusterId': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterStatus;
      return this.apiClient.callApi(
        '/organization/{organizationId}/cluster/{clusterId}/deploy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editCluster operation.
     * @callback module:api/ClustersApi~editClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cluster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a cluster
     * @param {String} organizationId Organization ID
     * @param {String} clusterId Cluster ID
     * @param {Object} opts Optional parameters
     * @param {module:model/ClusterRequest} opts.clusterRequest 
     * @param {module:api/ClustersApi~editClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cluster}
     */
    editCluster(organizationId, clusterId, opts, callback) {
      opts = opts || {};
      let postBody = opts['clusterRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling editCluster");
      }
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling editCluster");
      }

      let pathParams = {
        'organizationId': organizationId,
        'clusterId': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Cluster;
      return this.apiClient.callApi(
        '/organization/{organizationId}/cluster/{clusterId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editClusterAdvancedSettings operation.
     * @callback module:api/ClustersApi~editClusterAdvancedSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterAdvancedSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit advanced settings
     * Edit advanced settings by returning table of advanced settings.
     * @param {String} organizationId Organization ID
     * @param {String} clusterId Cluster ID
     * @param {Object} opts Optional parameters
     * @param {module:model/ClusterAdvancedSettings} opts.clusterAdvancedSettings 
     * @param {module:api/ClustersApi~editClusterAdvancedSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterAdvancedSettings}
     */
    editClusterAdvancedSettings(organizationId, clusterId, opts, callback) {
      opts = opts || {};
      let postBody = opts['clusterAdvancedSettings'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling editClusterAdvancedSettings");
      }
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling editClusterAdvancedSettings");
      }

      let pathParams = {
        'organizationId': organizationId,
        'clusterId': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterAdvancedSettings;
      return this.apiClient.callApi(
        '/organization/{organizationId}/cluster/{clusterId}/advancedSettings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editClusterKubeconfig operation.
     * @callback module:api/ClustersApi~editClusterKubeconfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit cluster kubeconfig
     * @param {String} organizationId Organization ID
     * @param {String} clusterId Cluster ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/ClustersApi~editClusterKubeconfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editClusterKubeconfig(organizationId, clusterId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling editClusterKubeconfig");
      }
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling editClusterKubeconfig");
      }

      let pathParams = {
        'organizationId': organizationId,
        'clusterId': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = ['application/x-yaml'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organization/{organizationId}/cluster/{clusterId}/kubeconfig', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editRoutingTable operation.
     * @callback module:api/ClustersApi~editRoutingTableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterRoutingTable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit routing table
     * Edit routing table by returning updated table.
     * @param {String} organizationId Organization ID
     * @param {String} clusterId Cluster ID
     * @param {Object} opts Optional parameters
     * @param {module:model/ClusterRoutingTableRequest} opts.clusterRoutingTableRequest 
     * @param {module:api/ClustersApi~editRoutingTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterRoutingTable}
     */
    editRoutingTable(organizationId, clusterId, opts, callback) {
      opts = opts || {};
      let postBody = opts['clusterRoutingTableRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling editRoutingTable");
      }
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling editRoutingTable");
      }

      let pathParams = {
        'organizationId': organizationId,
        'clusterId': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterRoutingTable;
      return this.apiClient.callApi(
        '/organization/{organizationId}/cluster/{clusterId}/routingTable', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClusterAdvancedSettings operation.
     * @callback module:api/ClustersApi~getClusterAdvancedSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterAdvancedSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get advanced settings
     * Get the list and values of the advanced settings of the cluster. Default values for each setting are available in [our documentation](https://hub.qovery.com/docs/using-qovery/configuration/cluster-advanced-settings/) 
     * @param {String} organizationId Organization ID
     * @param {String} clusterId Cluster ID
     * @param {module:api/ClustersApi~getClusterAdvancedSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterAdvancedSettings}
     */
    getClusterAdvancedSettings(organizationId, clusterId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getClusterAdvancedSettings");
      }
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling getClusterAdvancedSettings");
      }

      let pathParams = {
        'organizationId': organizationId,
        'clusterId': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterAdvancedSettings;
      return this.apiClient.callApi(
        '/organization/{organizationId}/cluster/{clusterId}/advancedSettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClusterKubeconfig operation.
     * @callback module:api/ClustersApi~getClusterKubeconfigCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get cluster kubeconfig
     * @param {String} organizationId Organization ID
     * @param {String} clusterId Cluster ID
     * @param {module:api/ClustersApi~getClusterKubeconfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getClusterKubeconfig(organizationId, clusterId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getClusterKubeconfig");
      }
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling getClusterKubeconfig");
      }

      let pathParams = {
        'organizationId': organizationId,
        'clusterId': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/x-yaml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/organization/{organizationId}/cluster/{clusterId}/kubeconfig', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClusterReadinessStatus operation.
     * @callback module:api/ClustersApi~getClusterReadinessStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterReadinessStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Know if a cluster is ready to be deployed or not
     * @param {String} organizationId Organization ID
     * @param {String} clusterId Cluster ID
     * @param {module:api/ClustersApi~getClusterReadinessStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterReadinessStatus}
     */
    getClusterReadinessStatus(organizationId, clusterId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getClusterReadinessStatus");
      }
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling getClusterReadinessStatus");
      }

      let pathParams = {
        'organizationId': organizationId,
        'clusterId': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterReadinessStatus;
      return this.apiClient.callApi(
        '/organization/{organizationId}/cluster/{clusterId}/isReady', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClusterStatus operation.
     * @callback module:api/ClustersApi~getClusterStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterStatusGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get cluster status
     * @param {String} organizationId Organization ID
     * @param {String} clusterId Cluster ID
     * @param {module:api/ClustersApi~getClusterStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterStatusGet}
     */
    getClusterStatus(organizationId, clusterId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getClusterStatus");
      }
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling getClusterStatus");
      }

      let pathParams = {
        'organizationId': organizationId,
        'clusterId': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterStatusGet;
      return this.apiClient.callApi(
        '/organization/{organizationId}/cluster/{clusterId}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDefaultClusterAdvancedSettings operation.
     * @callback module:api/ClustersApi~getDefaultClusterAdvancedSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterAdvancedSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List default cluster advanced settings
     * Default values for each setting are available in [our documentation](https://hub.qovery.com/docs/using-qovery/configuration/cluster-advanced-settings/)
     * @param {module:api/ClustersApi~getDefaultClusterAdvancedSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterAdvancedSettings}
     */
    getDefaultClusterAdvancedSettings(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterAdvancedSettings;
      return this.apiClient.callApi(
        '/defaultClusterAdvancedSettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstallationHelmValues operation.
     * @callback module:api/ClustersApi~getInstallationHelmValuesCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get cluster helm values for self managed installation
     * @param {String} organizationId Organization ID
     * @param {String} clusterId Cluster ID
     * @param {module:api/ClustersApi~getInstallationHelmValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getInstallationHelmValues(organizationId, clusterId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getInstallationHelmValues");
      }
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling getInstallationHelmValues");
      }

      let pathParams = {
        'organizationId': organizationId,
        'clusterId': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/x-yaml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/organization/{organizationId}/cluster/{clusterId}/installationHelmValues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationCloudProviderInfo operation.
     * @callback module:api/ClustersApi~getOrganizationCloudProviderInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterCloudProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get cluster cloud provider info and credentials
     * @param {String} organizationId Organization ID
     * @param {String} clusterId Cluster ID
     * @param {module:api/ClustersApi~getOrganizationCloudProviderInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterCloudProviderInfo}
     */
    getOrganizationCloudProviderInfo(organizationId, clusterId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationCloudProviderInfo");
      }
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling getOrganizationCloudProviderInfo");
      }

      let pathParams = {
        'organizationId': organizationId,
        'clusterId': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterCloudProviderInfo;
      return this.apiClient.callApi(
        '/organization/{organizationId}/cluster/{clusterId}/cloudProviderInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationClusterStatus operation.
     * @callback module:api/ClustersApi~getOrganizationClusterStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterStatusResponseList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all clusters statuses
     * Returns a list of clusters with only their id and status.
     * @param {String} organizationId Organization ID
     * @param {module:api/ClustersApi~getOrganizationClusterStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterStatusResponseList}
     */
    getOrganizationClusterStatus(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationClusterStatus");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterStatusResponseList;
      return this.apiClient.callApi(
        '/organization/{organizationId}/cluster/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRoutingTable operation.
     * @callback module:api/ClustersApi~getRoutingTableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterRoutingTable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get routing table
     * Retrieve network routing table where each line corresponds to a route between a destination and a target.
     * @param {String} organizationId Organization ID
     * @param {String} clusterId Cluster ID
     * @param {module:api/ClustersApi~getRoutingTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterRoutingTable}
     */
    getRoutingTable(organizationId, clusterId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getRoutingTable");
      }
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling getRoutingTable");
      }

      let pathParams = {
        'organizationId': organizationId,
        'clusterId': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterRoutingTable;
      return this.apiClient.callApi(
        '/organization/{organizationId}/cluster/{clusterId}/routingTable', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listClusterLogs operation.
     * @callback module:api/ClustersApi~listClusterLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterLogsResponseList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Cluster Logs
     * List Cluster Logs
     * @param {String} organizationId Organization ID
     * @param {String} clusterId Cluster ID
     * @param {module:api/ClustersApi~listClusterLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterLogsResponseList}
     */
    listClusterLogs(organizationId, clusterId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling listClusterLogs");
      }
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling listClusterLogs");
      }

      let pathParams = {
        'organizationId': organizationId,
        'clusterId': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterLogsResponseList;
      return this.apiClient.callApi(
        '/organization/{organizationId}/cluster/{clusterId}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOrganizationCluster operation.
     * @callback module:api/ClustersApi~listOrganizationClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterResponseList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List organization clusters
     * @param {String} organizationId Organization ID
     * @param {module:api/ClustersApi~listOrganizationClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterResponseList}
     */
    listOrganizationCluster(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling listOrganizationCluster");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterResponseList;
      return this.apiClient.callApi(
        '/organization/{organizationId}/cluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the specifyClusterCloudProviderInfo operation.
     * @callback module:api/ClustersApi~specifyClusterCloudProviderInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterCloudProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Specify cluster cloud provider info and credentials
     * @param {String} organizationId Organization ID
     * @param {String} clusterId Cluster ID
     * @param {Object} opts Optional parameters
     * @param {module:model/ClusterCloudProviderInfoRequest} opts.clusterCloudProviderInfoRequest 
     * @param {module:api/ClustersApi~specifyClusterCloudProviderInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterCloudProviderInfo}
     */
    specifyClusterCloudProviderInfo(organizationId, clusterId, opts, callback) {
      opts = opts || {};
      let postBody = opts['clusterCloudProviderInfoRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling specifyClusterCloudProviderInfo");
      }
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling specifyClusterCloudProviderInfo");
      }

      let pathParams = {
        'organizationId': organizationId,
        'clusterId': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterCloudProviderInfo;
      return this.apiClient.callApi(
        '/organization/{organizationId}/cluster/{clusterId}/cloudProviderInfo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopCluster operation.
     * @callback module:api/ClustersApi~stopClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop cluster
     * Cluster stop has been requester.
     * @param {String} organizationId Organization ID
     * @param {String} clusterId Cluster ID
     * @param {module:api/ClustersApi~stopClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterStatus}
     */
    stopCluster(organizationId, clusterId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling stopCluster");
      }
      // verify the required parameter 'clusterId' is set
      if (clusterId === undefined || clusterId === null) {
        throw new Error("Missing the required parameter 'clusterId' when calling stopCluster");
      }

      let pathParams = {
        'organizationId': organizationId,
        'clusterId': clusterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterStatus;
      return this.apiClient.callApi(
        '/organization/{organizationId}/cluster/{clusterId}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
