/**
 * Qovery API
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Base from './Base';
import HelmResponseAllOfPorts from './HelmResponseAllOfPorts';
import HelmResponseAllOfSource from './HelmResponseAllOfSource';
import HelmResponseAllOfValuesOverride from './HelmResponseAllOfValuesOverride';
import ReferenceObject from './ReferenceObject';

/**
 * The HelmResponse model module.
 * @module model/HelmResponse
 * @version $(grep &#39;version&#39; _build/openapi.yaml | head -1 | tr &#39;:&#39; &#39;\n&#39; | tail -1 | tr -d &#39; &#39;)
 */
class HelmResponse {
    /**
     * Constructs a new <code>HelmResponse</code>.
     * @alias module:model/HelmResponse
     * @implements module:model/Base
     * @param id {String} 
     * @param createdAt {Date} 
     * @param environment {module:model/ReferenceObject} 
     * @param name {String} name is case insensitive
     * @param autoPreview {Boolean} Indicates if the 'environment preview option' is enabled.   If enabled, a preview environment will be automatically cloned when `/preview` endpoint is called.   If not specified, it takes the value of the `auto_preview` property from the associated environment. 
     * @param autoDeploy {Boolean} Specify if the service will be automatically updated after receiving a new image tag or a new commit according to the source type. 
     * @param source {module:model/HelmResponseAllOfSource} 
     * @param _arguments {Array.<String>} The extra arguments to pass to helm
     * @param allowClusterWideResources {Boolean} If we should allow the chart to deploy object outside his specified namespace. Setting this flag to true, requires special rights 
     * @param valuesOverride {module:model/HelmResponseAllOfValuesOverride} 
     */
    constructor(id, createdAt, environment, name, autoPreview, autoDeploy, source, _arguments, allowClusterWideResources, valuesOverride) { 
        Base.initialize(this, id, createdAt);
        HelmResponse.initialize(this, id, createdAt, environment, name, autoPreview, autoDeploy, source, _arguments, allowClusterWideResources, valuesOverride);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, createdAt, environment, name, autoPreview, autoDeploy, source, _arguments, allowClusterWideResources, valuesOverride) { 
        obj['id'] = id;
        obj['created_at'] = createdAt;
        obj['environment'] = environment;
        obj['name'] = name;
        obj['auto_preview'] = autoPreview;
        obj['auto_deploy'] = autoDeploy;
        obj['source'] = source;
        obj['arguments'] = _arguments;
        obj['allow_cluster_wide_resources'] = allowClusterWideResources || false;
        obj['values_override'] = valuesOverride;
    }

    /**
     * Constructs a <code>HelmResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HelmResponse} obj Optional instance to populate.
     * @return {module:model/HelmResponse} The populated <code>HelmResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HelmResponse();
            Base.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('environment')) {
                obj['environment'] = ReferenceObject.constructFromObject(data['environment']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('timeout_sec')) {
                obj['timeout_sec'] = ApiClient.convertToType(data['timeout_sec'], 'Number');
            }
            if (data.hasOwnProperty('auto_preview')) {
                obj['auto_preview'] = ApiClient.convertToType(data['auto_preview'], 'Boolean');
            }
            if (data.hasOwnProperty('auto_deploy')) {
                obj['auto_deploy'] = ApiClient.convertToType(data['auto_deploy'], 'Boolean');
            }
            if (data.hasOwnProperty('ports')) {
                obj['ports'] = ApiClient.convertToType(data['ports'], [HelmResponseAllOfPorts]);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = HelmResponseAllOfSource.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('arguments')) {
                obj['arguments'] = ApiClient.convertToType(data['arguments'], ['String']);
            }
            if (data.hasOwnProperty('allow_cluster_wide_resources')) {
                obj['allow_cluster_wide_resources'] = ApiClient.convertToType(data['allow_cluster_wide_resources'], 'Boolean');
            }
            if (data.hasOwnProperty('values_override')) {
                obj['values_override'] = HelmResponseAllOfValuesOverride.constructFromObject(data['values_override']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HelmResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HelmResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HelmResponse.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `environment`
        if (data['environment']) { // data not null
          ReferenceObject.validateJSON(data['environment']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['ports']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ports'])) {
                throw new Error("Expected the field `ports` to be an array in the JSON data but got " + data['ports']);
            }
            // validate the optional field `ports` (array)
            for (const item of data['ports']) {
                HelmResponseAllOfPorts.validateJSON(item);
            };
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          HelmResponseAllOfSource.validateJSON(data['source']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['arguments'])) {
            throw new Error("Expected the field `arguments` to be an array in the JSON data but got " + data['arguments']);
        }
        // validate the optional field `values_override`
        if (data['values_override']) { // data not null
          HelmResponseAllOfValuesOverride.validateJSON(data['values_override']);
        }

        return true;
    }


}

HelmResponse.RequiredProperties = ["id", "created_at", "environment", "name", "auto_preview", "auto_deploy", "source", "arguments", "allow_cluster_wide_resources", "values_override"];

/**
 * @member {String} id
 */
HelmResponse.prototype['id'] = undefined;

/**
 * @member {Date} created_at
 */
HelmResponse.prototype['created_at'] = undefined;

/**
 * @member {Date} updated_at
 */
HelmResponse.prototype['updated_at'] = undefined;

/**
 * @member {module:model/ReferenceObject} environment
 */
HelmResponse.prototype['environment'] = undefined;

/**
 * name is case insensitive
 * @member {String} name
 */
HelmResponse.prototype['name'] = undefined;

/**
 * @member {String} description
 */
HelmResponse.prototype['description'] = undefined;

/**
 * Maximum number of seconds allowed for helm to run before killing it and mark it as failed 
 * @member {Number} timeout_sec
 * @default 600
 */
HelmResponse.prototype['timeout_sec'] = 600;

/**
 * Indicates if the 'environment preview option' is enabled.   If enabled, a preview environment will be automatically cloned when `/preview` endpoint is called.   If not specified, it takes the value of the `auto_preview` property from the associated environment. 
 * @member {Boolean} auto_preview
 */
HelmResponse.prototype['auto_preview'] = undefined;

/**
 * Specify if the service will be automatically updated after receiving a new image tag or a new commit according to the source type. 
 * @member {Boolean} auto_deploy
 */
HelmResponse.prototype['auto_deploy'] = undefined;

/**
 * @member {Array.<module:model/HelmResponseAllOfPorts>} ports
 */
HelmResponse.prototype['ports'] = undefined;

/**
 * @member {module:model/HelmResponseAllOfSource} source
 */
HelmResponse.prototype['source'] = undefined;

/**
 * The extra arguments to pass to helm
 * @member {Array.<String>} arguments
 */
HelmResponse.prototype['arguments'] = undefined;

/**
 * If we should allow the chart to deploy object outside his specified namespace. Setting this flag to true, requires special rights 
 * @member {Boolean} allow_cluster_wide_resources
 * @default false
 */
HelmResponse.prototype['allow_cluster_wide_resources'] = false;

/**
 * @member {module:model/HelmResponseAllOfValuesOverride} values_override
 */
HelmResponse.prototype['values_override'] = undefined;


// Implement Base interface:
/**
 * @member {String} id
 */
Base.prototype['id'] = undefined;
/**
 * @member {Date} created_at
 */
Base.prototype['created_at'] = undefined;
/**
 * @member {Date} updated_at
 */
Base.prototype['updated_at'] = undefined;




export default HelmResponse;

