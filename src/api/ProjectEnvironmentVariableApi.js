/**
 * Qovery API
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EnvironmentVariableEditRequest from '../model/EnvironmentVariableEditRequest';
import EnvironmentVariableRequest from '../model/EnvironmentVariableRequest';
import EnvironmentVariableResponse from '../model/EnvironmentVariableResponse';
import EnvironmentVariableResponseList from '../model/EnvironmentVariableResponseList';
import Key from '../model/Key';
import Value from '../model/Value';

/**
* ProjectEnvironmentVariable service.
* @module api/ProjectEnvironmentVariableApi
* @version $(grep 'version' _build/openapi.yaml | head -1 | tr ':' '\n' | tail -1 | tr -d ' ')
*/
export default class ProjectEnvironmentVariableApi {

    /**
    * Constructs a new ProjectEnvironmentVariableApi. 
    * @alias module:api/ProjectEnvironmentVariableApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createProjectEnvironmentVariable operation.
     * @callback module:api/ProjectEnvironmentVariableApi~createProjectEnvironmentVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvironmentVariableResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an environment variable to the project
     * - Add an environment variable to the project.   - If the environment variable key already exists, then it will be replaced by the new one.   - If the environment variable value points toward an existing environment variable key, it will be considered as an alias. 
     * @param {String} projectId Project ID
     * @param {Object} opts Optional parameters
     * @param {module:model/EnvironmentVariableRequest} opts.environmentVariableRequest 
     * @param {module:api/ProjectEnvironmentVariableApi~createProjectEnvironmentVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvironmentVariableResponse}
     */
    createProjectEnvironmentVariable(projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['environmentVariableRequest'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createProjectEnvironmentVariable");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnvironmentVariableResponse;
      return this.apiClient.callApi(
        '/project/{projectId}/environmentVariable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProjectEnvironmentVariableAlias operation.
     * @callback module:api/ProjectEnvironmentVariableApi~createProjectEnvironmentVariableAliasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvironmentVariableResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an environment variable alias at the project level
     * - Allows you to add an alias at project level on an existing environment variable having higher scope, in order to customize its key. - You only have to specify a key in the request body - The system will create a new environment variable at project level with the same value as the one corresponding to the variable id in the path - The response body will contain the newly created variable - Information regarding the aliased_variable will be exposed in the \"aliased_variable\" field of the newly created variable - Only 1 alias level is allowed. You can't create an alias on an alias 
     * @param {String} projectId Project ID
     * @param {String} environmentVariableId Environment Variable ID
     * @param {Object} opts Optional parameters
     * @param {module:model/Key} opts.key 
     * @param {module:api/ProjectEnvironmentVariableApi~createProjectEnvironmentVariableAliasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvironmentVariableResponse}
     */
    createProjectEnvironmentVariableAlias(projectId, environmentVariableId, opts, callback) {
      opts = opts || {};
      let postBody = opts['key'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createProjectEnvironmentVariableAlias");
      }
      // verify the required parameter 'environmentVariableId' is set
      if (environmentVariableId === undefined || environmentVariableId === null) {
        throw new Error("Missing the required parameter 'environmentVariableId' when calling createProjectEnvironmentVariableAlias");
      }

      let pathParams = {
        'projectId': projectId,
        'environmentVariableId': environmentVariableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnvironmentVariableResponse;
      return this.apiClient.callApi(
        '/project/{projectId}/environmentVariable/{environmentVariableId}/alias', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProjectEnvironmentVariableOverride operation.
     * @callback module:api/ProjectEnvironmentVariableApi~createProjectEnvironmentVariableOverrideCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvironmentVariableResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an environment variable override at the project level
     * - Allows you to override at project level an environment variable that has a higher scope. - You only have to specify a value in the request body - The system will create a new environment variable at project level with the same key as the one corresponding to the variable id in the path - The response body will contain the newly created variable - Information regarding the overridden_variable will be exposed in the \"overridden_variable\" field of the newly created variable 
     * @param {String} projectId Project ID
     * @param {String} environmentVariableId Environment Variable ID
     * @param {Object} opts Optional parameters
     * @param {module:model/Value} opts.value 
     * @param {module:api/ProjectEnvironmentVariableApi~createProjectEnvironmentVariableOverrideCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvironmentVariableResponse}
     */
    createProjectEnvironmentVariableOverride(projectId, environmentVariableId, opts, callback) {
      opts = opts || {};
      let postBody = opts['value'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createProjectEnvironmentVariableOverride");
      }
      // verify the required parameter 'environmentVariableId' is set
      if (environmentVariableId === undefined || environmentVariableId === null) {
        throw new Error("Missing the required parameter 'environmentVariableId' when calling createProjectEnvironmentVariableOverride");
      }

      let pathParams = {
        'projectId': projectId,
        'environmentVariableId': environmentVariableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnvironmentVariableResponse;
      return this.apiClient.callApi(
        '/project/{projectId}/environmentVariable/{environmentVariableId}/override', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProjectEnvironmentVariable operation.
     * @callback module:api/ProjectEnvironmentVariableApi~deleteProjectEnvironmentVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an environment variable from a project
     * - To delete an environment variable you must have the project user permission - You can't delete a BUILT_IN variable - If you delete a variable having override or alias, the associated override/alias will be deleted as well 
     * @param {String} projectId Project ID
     * @param {String} environmentVariableId Environment Variable ID
     * @param {module:api/ProjectEnvironmentVariableApi~deleteProjectEnvironmentVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProjectEnvironmentVariable(projectId, environmentVariableId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteProjectEnvironmentVariable");
      }
      // verify the required parameter 'environmentVariableId' is set
      if (environmentVariableId === undefined || environmentVariableId === null) {
        throw new Error("Missing the required parameter 'environmentVariableId' when calling deleteProjectEnvironmentVariable");
      }

      let pathParams = {
        'projectId': projectId,
        'environmentVariableId': environmentVariableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectId}/environmentVariable/{environmentVariableId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editProjectEnvironmentVariable operation.
     * @callback module:api/ProjectEnvironmentVariableApi~editProjectEnvironmentVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvironmentVariableResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit an environment variable belonging to the project
     * - You can't edit a BUILT_IN variable - For an override, you can't edit the key - For an alias, you can't edit the value - An override can only have a scope lower to the variable it is overriding (hierarchy is BUILT_IN > PROJECT > ENVIRONMENT > APPLICATION) 
     * @param {String} projectId Project ID
     * @param {String} environmentVariableId Environment Variable ID
     * @param {module:model/EnvironmentVariableEditRequest} environmentVariableEditRequest 
     * @param {module:api/ProjectEnvironmentVariableApi~editProjectEnvironmentVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvironmentVariableResponse}
     */
    editProjectEnvironmentVariable(projectId, environmentVariableId, environmentVariableEditRequest, callback) {
      let postBody = environmentVariableEditRequest;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling editProjectEnvironmentVariable");
      }
      // verify the required parameter 'environmentVariableId' is set
      if (environmentVariableId === undefined || environmentVariableId === null) {
        throw new Error("Missing the required parameter 'environmentVariableId' when calling editProjectEnvironmentVariable");
      }
      // verify the required parameter 'environmentVariableEditRequest' is set
      if (environmentVariableEditRequest === undefined || environmentVariableEditRequest === null) {
        throw new Error("Missing the required parameter 'environmentVariableEditRequest' when calling editProjectEnvironmentVariable");
      }

      let pathParams = {
        'projectId': projectId,
        'environmentVariableId': environmentVariableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnvironmentVariableResponse;
      return this.apiClient.callApi(
        '/project/{projectId}/environmentVariable/{environmentVariableId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProjectEnvironmentVariable operation.
     * @callback module:api/ProjectEnvironmentVariableApi~listProjectEnvironmentVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvironmentVariableResponseList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List project environment variables
     * @param {String} projectId Project ID
     * @param {module:api/ProjectEnvironmentVariableApi~listProjectEnvironmentVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvironmentVariableResponseList}
     */
    listProjectEnvironmentVariable(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling listProjectEnvironmentVariable");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvironmentVariableResponseList;
      return this.apiClient.callApi(
        '/project/{projectId}/environmentVariable', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
