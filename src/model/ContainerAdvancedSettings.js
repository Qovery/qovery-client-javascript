/**
 * Qovery API
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContainerAdvancedSettings model module.
 * @module model/ContainerAdvancedSettings
 * @version $(grep &#39;version&#39; _build/openapi.yaml | head -1 | tr &#39;:&#39; &#39;\n&#39; | tail -1 | tr -d &#39; &#39;)
 */
class ContainerAdvancedSettings {
    /**
     * Constructs a new <code>ContainerAdvancedSettings</code>.
     * @alias module:model/ContainerAdvancedSettings
     */
    constructor() { 
        
        ContainerAdvancedSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContainerAdvancedSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContainerAdvancedSettings} obj Optional instance to populate.
     * @return {module:model/ContainerAdvancedSettings} The populated <code>ContainerAdvancedSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContainerAdvancedSettings();

            if (data.hasOwnProperty('deployment.delay_start_time_sec')) {
                obj['deployment.delay_start_time_sec'] = ApiClient.convertToType(data['deployment.delay_start_time_sec'], 'Number');
            }
            if (data.hasOwnProperty('deployment.custom_domain_check_enabled')) {
                obj['deployment.custom_domain_check_enabled'] = ApiClient.convertToType(data['deployment.custom_domain_check_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('build.timeout_max_sec')) {
                obj['build.timeout_max_sec'] = ApiClient.convertToType(data['build.timeout_max_sec'], 'Number');
            }
            if (data.hasOwnProperty('network.ingress.proxy_body_size_mb')) {
                obj['network.ingress.proxy_body_size_mb'] = ApiClient.convertToType(data['network.ingress.proxy_body_size_mb'], 'Number');
            }
            if (data.hasOwnProperty('network.ingress.enable_cors')) {
                obj['network.ingress.enable_cors'] = ApiClient.convertToType(data['network.ingress.enable_cors'], 'Boolean');
            }
            if (data.hasOwnProperty('network.ingress.cors_allow_origin')) {
                obj['network.ingress.cors_allow_origin'] = ApiClient.convertToType(data['network.ingress.cors_allow_origin'], 'String');
            }
            if (data.hasOwnProperty('network.ingress.cors_allow_methods')) {
                obj['network.ingress.cors_allow_methods'] = ApiClient.convertToType(data['network.ingress.cors_allow_methods'], 'String');
            }
            if (data.hasOwnProperty('network.ingress.cors_allow_headers')) {
                obj['network.ingress.cors_allow_headers'] = ApiClient.convertToType(data['network.ingress.cors_allow_headers'], 'String');
            }
            if (data.hasOwnProperty('readiness_probe.type')) {
                obj['readiness_probe.type'] = ApiClient.convertToType(data['readiness_probe.type'], 'String');
            }
            if (data.hasOwnProperty('readiness_probe.http_get.path')) {
                obj['readiness_probe.http_get.path'] = ApiClient.convertToType(data['readiness_probe.http_get.path'], 'String');
            }
            if (data.hasOwnProperty('readiness_probe.initial_delay_seconds')) {
                obj['readiness_probe.initial_delay_seconds'] = ApiClient.convertToType(data['readiness_probe.initial_delay_seconds'], 'Number');
            }
            if (data.hasOwnProperty('readiness_probe.period_seconds')) {
                obj['readiness_probe.period_seconds'] = ApiClient.convertToType(data['readiness_probe.period_seconds'], 'Number');
            }
            if (data.hasOwnProperty('readiness_probe.timeout_seconds')) {
                obj['readiness_probe.timeout_seconds'] = ApiClient.convertToType(data['readiness_probe.timeout_seconds'], 'Number');
            }
            if (data.hasOwnProperty('readiness_probe.success_threshold')) {
                obj['readiness_probe.success_threshold'] = ApiClient.convertToType(data['readiness_probe.success_threshold'], 'Number');
            }
            if (data.hasOwnProperty('readiness_probe.failure_threshold')) {
                obj['readiness_probe.failure_threshold'] = ApiClient.convertToType(data['readiness_probe.failure_threshold'], 'Number');
            }
            if (data.hasOwnProperty('liveness_probe.type')) {
                obj['liveness_probe.type'] = ApiClient.convertToType(data['liveness_probe.type'], 'String');
            }
            if (data.hasOwnProperty('liveness_probe.http_get.path')) {
                obj['liveness_probe.http_get.path'] = ApiClient.convertToType(data['liveness_probe.http_get.path'], 'String');
            }
            if (data.hasOwnProperty('liveness_probe.initial_delay_seconds')) {
                obj['liveness_probe.initial_delay_seconds'] = ApiClient.convertToType(data['liveness_probe.initial_delay_seconds'], 'Number');
            }
            if (data.hasOwnProperty('liveness_probe.period_seconds')) {
                obj['liveness_probe.period_seconds'] = ApiClient.convertToType(data['liveness_probe.period_seconds'], 'Number');
            }
            if (data.hasOwnProperty('liveness_probe.timeout_seconds')) {
                obj['liveness_probe.timeout_seconds'] = ApiClient.convertToType(data['liveness_probe.timeout_seconds'], 'Number');
            }
            if (data.hasOwnProperty('liveness_probe.success_threshold')) {
                obj['liveness_probe.success_threshold'] = ApiClient.convertToType(data['liveness_probe.success_threshold'], 'Number');
            }
            if (data.hasOwnProperty('liveness_probe.failure_threshold')) {
                obj['liveness_probe.failure_threshold'] = ApiClient.convertToType(data['liveness_probe.failure_threshold'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * please use `readiness_probe.initial_delay_seconds` and `liveness_probe.initial_delay_seconds` instead
 * @member {Number} deployment.delay_start_time_sec
 * @default 30
 */
ContainerAdvancedSettings.prototype['deployment.delay_start_time_sec'] = 30;

/**
 * disable custom domain check when deploying an application
 * @member {Boolean} deployment.custom_domain_check_enabled
 * @default true
 */
ContainerAdvancedSettings.prototype['deployment.custom_domain_check_enabled'] = true;

/**
 * @member {Number} build.timeout_max_sec
 * @default 1800
 */
ContainerAdvancedSettings.prototype['build.timeout_max_sec'] = 1800;

/**
 * @member {Number} network.ingress.proxy_body_size_mb
 * @default 100
 */
ContainerAdvancedSettings.prototype['network.ingress.proxy_body_size_mb'] = 100;

/**
 * @member {Boolean} network.ingress.enable_cors
 * @default false
 */
ContainerAdvancedSettings.prototype['network.ingress.enable_cors'] = false;

/**
 * @member {String} network.ingress.cors_allow_origin
 * @default '*'
 */
ContainerAdvancedSettings.prototype['network.ingress.cors_allow_origin'] = '*';

/**
 * @member {String} network.ingress.cors_allow_methods
 * @default 'GET, PUT, POST, DELETE, PATCH, OPTIONS'
 */
ContainerAdvancedSettings.prototype['network.ingress.cors_allow_methods'] = 'GET, PUT, POST, DELETE, PATCH, OPTIONS';

/**
 * @member {String} network.ingress.cors_allow_headers
 * @default 'DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization'
 */
ContainerAdvancedSettings.prototype['network.ingress.cors_allow_headers'] = 'DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';

/**
 * `NONE` disable readiness probe `TCP` enable TCP readiness probe `HTTP` enable HTTP readiness probe 
 * @member {module:model/ContainerAdvancedSettings.ReadinessProbeTypeEnum} readiness_probe.type
 * @default 'TCP'
 */
ContainerAdvancedSettings.prototype['readiness_probe.type'] = 'TCP';

/**
 * HTTP GET path to check status (must returns 2xx E.g \"/healtz\") - only usable with TYPE = HTTP
 * @member {String} readiness_probe.http_get.path
 * @default '/'
 */
ContainerAdvancedSettings.prototype['readiness_probe.http_get.path'] = '/';

/**
 * Delay before liveness probe is initiated
 * @member {Number} readiness_probe.initial_delay_seconds
 * @default 30
 */
ContainerAdvancedSettings.prototype['readiness_probe.initial_delay_seconds'] = 30;

/**
 * How often to perform the probe
 * @member {Number} readiness_probe.period_seconds
 * @default 10
 */
ContainerAdvancedSettings.prototype['readiness_probe.period_seconds'] = 10;

/**
 * When the probe times out
 * @member {Number} readiness_probe.timeout_seconds
 * @default 1
 */
ContainerAdvancedSettings.prototype['readiness_probe.timeout_seconds'] = 1;

/**
 * Minimum consecutive successes for the probe to be considered successful after having failed.
 * @member {Number} readiness_probe.success_threshold
 * @default 1
 */
ContainerAdvancedSettings.prototype['readiness_probe.success_threshold'] = 1;

/**
 * Minimum consecutive failures for the probe to be considered failed after having succeeded.
 * @member {Number} readiness_probe.failure_threshold
 * @default 3
 */
ContainerAdvancedSettings.prototype['readiness_probe.failure_threshold'] = 3;

/**
 * `NONE` disable liveness probe `TCP` enable TCP liveness probe `HTTP` enable HTTP liveness probe 
 * @member {module:model/ContainerAdvancedSettings.LivenessProbeTypeEnum} liveness_probe.type
 * @default 'TCP'
 */
ContainerAdvancedSettings.prototype['liveness_probe.type'] = 'TCP';

/**
 * HTTP GET path to check status (must returns 2xx E.g \"/healtz\") - only usable with TYPE = HTTP
 * @member {String} liveness_probe.http_get.path
 * @default '/'
 */
ContainerAdvancedSettings.prototype['liveness_probe.http_get.path'] = '/';

/**
 * Delay before liveness probe is initiated
 * @member {Number} liveness_probe.initial_delay_seconds
 * @default 30
 */
ContainerAdvancedSettings.prototype['liveness_probe.initial_delay_seconds'] = 30;

/**
 * How often to perform the probe
 * @member {Number} liveness_probe.period_seconds
 * @default 10
 */
ContainerAdvancedSettings.prototype['liveness_probe.period_seconds'] = 10;

/**
 * When the probe times out
 * @member {Number} liveness_probe.timeout_seconds
 * @default 5
 */
ContainerAdvancedSettings.prototype['liveness_probe.timeout_seconds'] = 5;

/**
 * Minimum consecutive successes for the probe to be considered successful after having failed.
 * @member {Number} liveness_probe.success_threshold
 * @default 1
 */
ContainerAdvancedSettings.prototype['liveness_probe.success_threshold'] = 1;

/**
 * Minimum consecutive failures for the probe to be considered failed after having succeeded.
 * @member {Number} liveness_probe.failure_threshold
 * @default 3
 */
ContainerAdvancedSettings.prototype['liveness_probe.failure_threshold'] = 3;





/**
 * Allowed values for the <code>readiness_probe.type</code> property.
 * @enum {String}
 * @readonly
 */
ContainerAdvancedSettings['ReadinessProbeTypeEnum'] = {

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "TCP"
     * @const
     */
    "TCP": "TCP",

    /**
     * value: "HTTP"
     * @const
     */
    "HTTP": "HTTP"
};


/**
 * Allowed values for the <code>liveness_probe.type</code> property.
 * @enum {String}
 * @readonly
 */
ContainerAdvancedSettings['LivenessProbeTypeEnum'] = {

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "TCP"
     * @const
     */
    "TCP": "TCP",

    /**
     * value: "HTTP"
     * @const
     */
    "HTTP": "HTTP"
};



export default ContainerAdvancedSettings;

