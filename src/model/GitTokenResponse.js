/**
 * Qovery API
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Base from './Base';
import GitProviderEnum from './GitProviderEnum';
import GitTokenResponseAllOf from './GitTokenResponseAllOf';

/**
 * The GitTokenResponse model module.
 * @module model/GitTokenResponse
 * @version $(grep &#39;version&#39; _build/openapi.yaml | head -1 | tr &#39;:&#39; &#39;\n&#39; | tail -1 | tr -d &#39; &#39;)
 */
class GitTokenResponse {
    /**
     * Constructs a new <code>GitTokenResponse</code>.
     * @alias module:model/GitTokenResponse
     * @implements module:model/Base
     * @implements module:model/GitTokenResponseAllOf
     * @param id {String} 
     * @param createdAt {Date} 
     * @param name {String} 
     * @param type {module:model/GitProviderEnum} 
     */
    constructor(id, createdAt, name, type) { 
        Base.initialize(this, id, createdAt);GitTokenResponseAllOf.initialize(this, name, type);
        GitTokenResponse.initialize(this, id, createdAt, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, createdAt, name, type) { 
        obj['id'] = id;
        obj['created_at'] = createdAt;
        obj['name'] = name;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>GitTokenResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GitTokenResponse} obj Optional instance to populate.
     * @return {module:model/GitTokenResponse} The populated <code>GitTokenResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GitTokenResponse();
            Base.constructFromObject(data, obj);
            GitTokenResponseAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = GitProviderEnum.constructFromObject(data['type']);
            }
        }
        return obj;
    }


}

/**
 * @member {String} id
 */
GitTokenResponse.prototype['id'] = undefined;

/**
 * @member {Date} created_at
 */
GitTokenResponse.prototype['created_at'] = undefined;

/**
 * @member {Date} updated_at
 */
GitTokenResponse.prototype['updated_at'] = undefined;

/**
 * @member {String} name
 */
GitTokenResponse.prototype['name'] = undefined;

/**
 * @member {String} description
 */
GitTokenResponse.prototype['description'] = undefined;

/**
 * @member {module:model/GitProviderEnum} type
 */
GitTokenResponse.prototype['type'] = undefined;


// Implement Base interface:
/**
 * @member {String} id
 */
Base.prototype['id'] = undefined;
/**
 * @member {Date} created_at
 */
Base.prototype['created_at'] = undefined;
/**
 * @member {Date} updated_at
 */
Base.prototype['updated_at'] = undefined;
// Implement GitTokenResponseAllOf interface:
/**
 * @member {String} name
 */
GitTokenResponseAllOf.prototype['name'] = undefined;
/**
 * @member {String} description
 */
GitTokenResponseAllOf.prototype['description'] = undefined;
/**
 * @member {module:model/GitProviderEnum} type
 */
GitTokenResponseAllOf.prototype['type'] = undefined;




export default GitTokenResponse;

