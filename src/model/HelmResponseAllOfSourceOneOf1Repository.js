/**
 * Qovery API
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HelmResponseAllOfSourceOneOf1RepositoryRepository from './HelmResponseAllOfSourceOneOf1RepositoryRepository';

/**
 * The HelmResponseAllOfSourceOneOf1Repository model module.
 * @module model/HelmResponseAllOfSourceOneOf1Repository
 * @version $(grep &#39;version&#39; _build/openapi.yaml | head -1 | tr &#39;:&#39; &#39;\n&#39; | tail -1 | tr -d &#39; &#39;)
 */
class HelmResponseAllOfSourceOneOf1Repository {
    /**
     * Constructs a new <code>HelmResponseAllOfSourceOneOf1Repository</code>.
     * @alias module:model/HelmResponseAllOfSourceOneOf1Repository
     * @param chartName {String} The name of the chart in the repository
     * @param chartVersion {String} The version of the chart to use
     * @param repository {module:model/HelmResponseAllOfSourceOneOf1RepositoryRepository} 
     */
    constructor(chartName, chartVersion, repository) { 
        
        HelmResponseAllOfSourceOneOf1Repository.initialize(this, chartName, chartVersion, repository);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, chartName, chartVersion, repository) { 
        obj['chart_name'] = chartName;
        obj['chart_version'] = chartVersion;
        obj['repository'] = repository;
    }

    /**
     * Constructs a <code>HelmResponseAllOfSourceOneOf1Repository</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HelmResponseAllOfSourceOneOf1Repository} obj Optional instance to populate.
     * @return {module:model/HelmResponseAllOfSourceOneOf1Repository} The populated <code>HelmResponseAllOfSourceOneOf1Repository</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HelmResponseAllOfSourceOneOf1Repository();

            if (data.hasOwnProperty('chart_name')) {
                obj['chart_name'] = ApiClient.convertToType(data['chart_name'], 'String');
            }
            if (data.hasOwnProperty('chart_version')) {
                obj['chart_version'] = ApiClient.convertToType(data['chart_version'], 'String');
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = HelmResponseAllOfSourceOneOf1RepositoryRepository.constructFromObject(data['repository']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HelmResponseAllOfSourceOneOf1Repository</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HelmResponseAllOfSourceOneOf1Repository</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HelmResponseAllOfSourceOneOf1Repository.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['chart_name'] && !(typeof data['chart_name'] === 'string' || data['chart_name'] instanceof String)) {
            throw new Error("Expected the field `chart_name` to be a primitive type in the JSON string but got " + data['chart_name']);
        }
        // ensure the json data is a string
        if (data['chart_version'] && !(typeof data['chart_version'] === 'string' || data['chart_version'] instanceof String)) {
            throw new Error("Expected the field `chart_version` to be a primitive type in the JSON string but got " + data['chart_version']);
        }
        // validate the optional field `repository`
        if (data['repository']) { // data not null
          HelmResponseAllOfSourceOneOf1RepositoryRepository.validateJSON(data['repository']);
        }

        return true;
    }


}

HelmResponseAllOfSourceOneOf1Repository.RequiredProperties = ["chart_name", "chart_version", "repository"];

/**
 * The name of the chart in the repository
 * @member {String} chart_name
 */
HelmResponseAllOfSourceOneOf1Repository.prototype['chart_name'] = undefined;

/**
 * The version of the chart to use
 * @member {String} chart_version
 */
HelmResponseAllOfSourceOneOf1Repository.prototype['chart_version'] = undefined;

/**
 * @member {module:model/HelmResponseAllOfSourceOneOf1RepositoryRepository} repository
 */
HelmResponseAllOfSourceOneOf1Repository.prototype['repository'] = undefined;






export default HelmResponseAllOfSourceOneOf1Repository;

