/**
 * Qovery API
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Environment from '../model/Environment';
import EnvironmentRequest from '../model/EnvironmentRequest';
import EnvironmentResponseList from '../model/EnvironmentResponseList';
import EnvironmentStatsResponseList from '../model/EnvironmentStatsResponseList';
import Status from '../model/Status';

/**
* Environments service.
* @module api/EnvironmentsApi
* @version $(grep 'version' _build/openapi.yaml | head -1 | tr ':' '\n' | tail -1 | tr -d ' ')
*/
export default class EnvironmentsApi {

    /**
    * Constructs a new EnvironmentsApi. 
    * @alias module:api/EnvironmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createEnvironment operation.
     * @callback module:api/EnvironmentsApi~createEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Environment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an environment
     * @param {String} projectId Project ID
     * @param {Object} opts Optional parameters
     * @param {module:model/EnvironmentRequest} opts.environmentRequest 
     * @param {module:api/EnvironmentsApi~createEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Environment}
     */
    createEnvironment(projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['environmentRequest'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createEnvironment");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Environment;
      return this.apiClient.callApi(
        '/project/{projectId}/environment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectEnvironmentServiceNumber operation.
     * @callback module:api/EnvironmentsApi~getProjectEnvironmentServiceNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvironmentStatsResponseList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List total number of services for each environment of the project
     * Returns a list of environment ids, and for each its total numberof services
     * @param {String} projectId Project ID
     * @param {module:api/EnvironmentsApi~getProjectEnvironmentServiceNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvironmentStatsResponseList}
     */
    getProjectEnvironmentServiceNumber(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProjectEnvironmentServiceNumber");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvironmentStatsResponseList;
      return this.apiClient.callApi(
        '/project/{projectId}/environment/stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectEnvironmentStatus operation.
     * @callback module:api/EnvironmentsApi~getProjectEnvironmentStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List environments statuses
     * Returns a list of environments with only their id and status.
     * @param {String} projectId Project ID
     * @param {module:api/EnvironmentsApi~getProjectEnvironmentStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Status}
     */
    getProjectEnvironmentStatus(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProjectEnvironmentStatus");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Status;
      return this.apiClient.callApi(
        '/project/{projectId}/environment/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEnvironment operation.
     * @callback module:api/EnvironmentsApi~listEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvironmentResponseList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List environments
     * @param {String} projectId Project ID
     * @param {module:api/EnvironmentsApi~listEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvironmentResponseList}
     */
    listEnvironment(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling listEnvironment");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvironmentResponseList;
      return this.apiClient.callApi(
        '/project/{projectId}/environment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
