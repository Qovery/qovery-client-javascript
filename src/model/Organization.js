/**
 * Qovery API
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Base from './Base';
import OrganizationAllOf from './OrganizationAllOf';
import OrganizationRequest from './OrganizationRequest';
import PlanEnum from './PlanEnum';

/**
 * The Organization model module.
 * @module model/Organization
 * @version $(grep &#39;version&#39; _build/openapi.yaml | head -1 | tr &#39;:&#39; &#39;\n&#39; | tail -1 | tr -d &#39; &#39;)
 */
class Organization {
    /**
     * Constructs a new <code>Organization</code>.
     * @alias module:model/Organization
     * @implements module:model/Base
     * @implements module:model/OrganizationRequest
     * @implements module:model/OrganizationAllOf
     * @param id {String} 
     * @param createdAt {Date} 
     * @param name {String} name is case insensitive
     * @param plan {module:model/PlanEnum} 
     */
    constructor(id, createdAt, name, plan) { 
        Base.initialize(this, id, createdAt);OrganizationRequest.initialize(this, name, plan);OrganizationAllOf.initialize(this);
        Organization.initialize(this, id, createdAt, name, plan);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, createdAt, name, plan) { 
        obj['id'] = id;
        obj['created_at'] = createdAt;
        obj['name'] = name;
        obj['plan'] = plan;
    }

    /**
     * Constructs a <code>Organization</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Organization} obj Optional instance to populate.
     * @return {module:model/Organization} The populated <code>Organization</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Organization();
            Base.constructFromObject(data, obj);
            OrganizationRequest.constructFromObject(data, obj);
            OrganizationAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('plan')) {
                obj['plan'] = PlanEnum.constructFromObject(data['plan']);
            }
            if (data.hasOwnProperty('website_url')) {
                obj['website_url'] = ApiClient.convertToType(data['website_url'], 'String');
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = ApiClient.convertToType(data['repository'], 'String');
            }
            if (data.hasOwnProperty('logo_url')) {
                obj['logo_url'] = ApiClient.convertToType(data['logo_url'], 'String');
            }
            if (data.hasOwnProperty('icon_url')) {
                obj['icon_url'] = ApiClient.convertToType(data['icon_url'], 'String');
            }
            if (data.hasOwnProperty('admin_emails')) {
                obj['admin_emails'] = ApiClient.convertToType(data['admin_emails'], ['String']);
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} id
 */
Organization.prototype['id'] = undefined;

/**
 * @member {Date} created_at
 */
Organization.prototype['created_at'] = undefined;

/**
 * @member {Date} updated_at
 */
Organization.prototype['updated_at'] = undefined;

/**
 * name is case insensitive
 * @member {String} name
 */
Organization.prototype['name'] = undefined;

/**
 * @member {String} description
 */
Organization.prototype['description'] = undefined;

/**
 * @member {module:model/PlanEnum} plan
 */
Organization.prototype['plan'] = undefined;

/**
 * @member {String} website_url
 */
Organization.prototype['website_url'] = undefined;

/**
 * @member {String} repository
 */
Organization.prototype['repository'] = undefined;

/**
 * @member {String} logo_url
 */
Organization.prototype['logo_url'] = undefined;

/**
 * @member {String} icon_url
 */
Organization.prototype['icon_url'] = undefined;

/**
 * @member {Array.<String>} admin_emails
 */
Organization.prototype['admin_emails'] = undefined;

/**
 * uuid of the user owning the organization
 * @member {String} owner
 */
Organization.prototype['owner'] = undefined;


// Implement Base interface:
/**
 * @member {String} id
 */
Base.prototype['id'] = undefined;
/**
 * @member {Date} created_at
 */
Base.prototype['created_at'] = undefined;
/**
 * @member {Date} updated_at
 */
Base.prototype['updated_at'] = undefined;
// Implement OrganizationRequest interface:
/**
 * name is case insensitive
 * @member {String} name
 */
OrganizationRequest.prototype['name'] = undefined;
/**
 * @member {String} description
 */
OrganizationRequest.prototype['description'] = undefined;
/**
 * @member {module:model/PlanEnum} plan
 */
OrganizationRequest.prototype['plan'] = undefined;
/**
 * @member {String} website_url
 */
OrganizationRequest.prototype['website_url'] = undefined;
/**
 * @member {String} repository
 */
OrganizationRequest.prototype['repository'] = undefined;
/**
 * @member {String} logo_url
 */
OrganizationRequest.prototype['logo_url'] = undefined;
/**
 * @member {String} icon_url
 */
OrganizationRequest.prototype['icon_url'] = undefined;
/**
 * @member {Array.<String>} admin_emails
 */
OrganizationRequest.prototype['admin_emails'] = undefined;
// Implement OrganizationAllOf interface:
/**
 * uuid of the user owning the organization
 * @member {String} owner
 */
OrganizationAllOf.prototype['owner'] = undefined;




export default Organization;

