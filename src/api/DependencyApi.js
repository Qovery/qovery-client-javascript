/**
 * Qovery API
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support+api+documentation@qovery.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApplicationResponse from '../model/ApplicationResponse';
import ApplicationResponseList from '../model/ApplicationResponseList';

/**
* Dependency service.
* @module api/DependencyApi
* @version 1.0.0
*/
export default class DependencyApi {

    /**
    * Constructs a new DependencyApi. 
    * @alias module:api/DependencyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createApplicationDependency operation.
     * @callback module:api/DependencyApi~createApplicationDependencyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add application dependency to this application.
     * Add application dependency to this application to prevent this application starting before the linked dependencies
     * @param {String} applicationId Application ID
     * @param {String} targetApplicationId Target application ID
     * @param {module:api/DependencyApi~createApplicationDependencyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationResponse}
     */
    createApplicationDependency(applicationId, targetApplicationId, callback) {
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling createApplicationDependency");
      }
      // verify the required parameter 'targetApplicationId' is set
      if (targetApplicationId === undefined || targetApplicationId === null) {
        throw new Error("Missing the required parameter 'targetApplicationId' when calling createApplicationDependency");
      }

      let pathParams = {
        'applicationId': applicationId,
        'targetApplicationId': targetApplicationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplicationResponse;
      return this.apiClient.callApi(
        '/application/{applicationId}/dependency/{targetApplicationId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApplicationDependency operation.
     * @callback module:api/DependencyApi~listApplicationDependencyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationResponseList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List application dependencies
     * @param {String} applicationId Application ID
     * @param {module:api/DependencyApi~listApplicationDependencyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationResponseList}
     */
    listApplicationDependency(applicationId, callback) {
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling listApplicationDependency");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplicationResponseList;
      return this.apiClient.callApi(
        '/application/{applicationId}/dependency', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeApplicationDependency operation.
     * @callback module:api/DependencyApi~removeApplicationDependencyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove application dependency to this application.
     * @param {String} applicationId Application ID
     * @param {String} targetApplicationId Target application ID
     * @param {module:api/DependencyApi~removeApplicationDependencyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeApplicationDependency(applicationId, targetApplicationId, callback) {
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling removeApplicationDependency");
      }
      // verify the required parameter 'targetApplicationId' is set
      if (targetApplicationId === undefined || targetApplicationId === null) {
        throw new Error("Missing the required parameter 'targetApplicationId' when calling removeApplicationDependency");
      }

      let pathParams = {
        'applicationId': applicationId,
        'targetApplicationId': targetApplicationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/application/{applicationId}/dependency/{targetApplicationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
