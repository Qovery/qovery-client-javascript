/**
 * Qovery API
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GitRepositoryResponse model module.
 * @module model/GitRepositoryResponse
 * @version 1.0.3
 */
class GitRepositoryResponse {
    /**
     * Constructs a new <code>GitRepositoryResponse</code>.
     * @alias module:model/GitRepositoryResponse
     * @param id {String} 
     * @param name {String} 
     * @param url {String} 
     */
    constructor(id, name, url) { 
        
        GitRepositoryResponse.initialize(this, id, name, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, url) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>GitRepositoryResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GitRepositoryResponse} obj Optional instance to populate.
     * @return {module:model/GitRepositoryResponse} The populated <code>GitRepositoryResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GitRepositoryResponse();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('default_branch')) {
                obj['default_branch'] = ApiClient.convertToType(data['default_branch'], 'String');
            }
            if (data.hasOwnProperty('is_private')) {
                obj['is_private'] = ApiClient.convertToType(data['is_private'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * @member {String} id
 */
GitRepositoryResponse.prototype['id'] = undefined;

/**
 * @member {String} name
 */
GitRepositoryResponse.prototype['name'] = undefined;

/**
 * @member {String} url
 */
GitRepositoryResponse.prototype['url'] = undefined;

/**
 * @member {String} default_branch
 */
GitRepositoryResponse.prototype['default_branch'] = undefined;

/**
 * @member {Boolean} is_private
 */
GitRepositoryResponse.prototype['is_private'] = undefined;






export default GitRepositoryResponse;

