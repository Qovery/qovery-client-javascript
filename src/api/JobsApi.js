/**
 * Qovery API
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloneJobRequest from '../model/CloneJobRequest';
import JobAdvancedSettings from '../model/JobAdvancedSettings';
import JobRequest from '../model/JobRequest';
import JobResponse from '../model/JobResponse';
import JobResponseList from '../model/JobResponseList';
import ReferenceObjectStatusResponseList from '../model/ReferenceObjectStatusResponseList';

/**
* Jobs service.
* @module api/JobsApi
* @version $(grep 'version' _build/openapi.yaml | head -1 | tr ':' '\n' | tail -1 | tr -d ' ')
*/
export default class JobsApi {

    /**
    * Constructs a new JobsApi. 
    * @alias module:api/JobsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cloneJob operation.
     * @callback module:api/JobsApi~cloneJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clone job
     * This will create a new job with the same configuration on the targeted environment Id.
     * @param {String} jobId Job ID
     * @param {Object} opts Optional parameters
     * @param {module:model/CloneJobRequest} opts.cloneJobRequest 
     * @param {module:api/JobsApi~cloneJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobResponse}
     */
    cloneJob(jobId, opts, callback) {
      opts = opts || {};
      let postBody = opts['cloneJobRequest'];
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling cloneJob");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobResponse;
      return this.apiClient.callApi(
        '/job/{jobId}/clone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createJob operation.
     * @callback module:api/JobsApi~createJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a job
     * @param {String} environmentId Environment ID
     * @param {Object} opts Optional parameters
     * @param {module:model/JobRequest} opts.jobRequest 
     * @param {module:api/JobsApi~createJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobResponse}
     */
    createJob(environmentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['jobRequest'];
      // verify the required parameter 'environmentId' is set
      if (environmentId === undefined || environmentId === null) {
        throw new Error("Missing the required parameter 'environmentId' when calling createJob");
      }

      let pathParams = {
        'environmentId': environmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobResponse;
      return this.apiClient.callApi(
        '/environment/{environmentId}/job', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDefaultJobAdvancedSettings operation.
     * @callback module:api/JobsApi~getDefaultJobAdvancedSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobAdvancedSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List default job advanced settings
     * @param {module:api/JobsApi~getDefaultJobAdvancedSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobAdvancedSettings}
     */
    getDefaultJobAdvancedSettings(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobAdvancedSettings;
      return this.apiClient.callApi(
        '/defaultJobAdvancedSettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEnvironmentJobStatus operation.
     * @callback module:api/JobsApi~getEnvironmentJobStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReferenceObjectStatusResponseList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all environment job statuses
     * Returns a list of jobs with only their id and status.
     * @param {String} environmentId Environment ID
     * @param {module:api/JobsApi~getEnvironmentJobStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReferenceObjectStatusResponseList}
     */
    getEnvironmentJobStatus(environmentId, callback) {
      let postBody = null;
      // verify the required parameter 'environmentId' is set
      if (environmentId === undefined || environmentId === null) {
        throw new Error("Missing the required parameter 'environmentId' when calling getEnvironmentJobStatus");
      }

      let pathParams = {
        'environmentId': environmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReferenceObjectStatusResponseList;
      return this.apiClient.callApi(
        '/environment/{environmentId}/job/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listJobs operation.
     * @callback module:api/JobsApi~listJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobResponseList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List jobs
     * @param {String} environmentId Environment ID
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.toUpdate return (or not) results that must be updated (default to false)
     * @param {module:api/JobsApi~listJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobResponseList}
     */
    listJobs(environmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'environmentId' is set
      if (environmentId === undefined || environmentId === null) {
        throw new Error("Missing the required parameter 'environmentId' when calling listJobs");
      }

      let pathParams = {
        'environmentId': environmentId
      };
      let queryParams = {
        'toUpdate': opts['toUpdate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobResponseList;
      return this.apiClient.callApi(
        '/environment/{environmentId}/job', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
