/**
 * [BETA] Qovery API
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is in Beta and still in progress. Some endpoints are not available yet. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support+api+documentation@qovery.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LogicalDatabaseRequest from '../model/LogicalDatabaseRequest';
import LogicalDatabaseResponse from '../model/LogicalDatabaseResponse';

/**
* Database service.
* @module api/DatabaseApi
* @version 1.0.0
*/
export default class DatabaseApi {

    /**
    * Constructs a new DatabaseApi. 
    * @alias module:api/DatabaseApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createLogicalDatabaseOnDatabase operation.
     * @callback module:api/DatabaseApi~createLogicalDatabaseOnDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogicalDatabaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a logical database on the database
     * If you don't specify credentials, Qovery will autogenerate them.
     * @param {String} databaseId Database ID
     * @param {Object} opts Optional parameters
     * @param {module:model/LogicalDatabaseRequest} opts.logicalDatabaseRequest 
     * @param {module:api/DatabaseApi~createLogicalDatabaseOnDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogicalDatabaseResponse}
     */
    createLogicalDatabaseOnDatabase(databaseId, opts, callback) {
      opts = opts || {};
      let postBody = opts['logicalDatabaseRequest'];
      // verify the required parameter 'databaseId' is set
      if (databaseId === undefined || databaseId === null) {
        throw new Error("Missing the required parameter 'databaseId' when calling createLogicalDatabaseOnDatabase");
      }

      let pathParams = {
        'databaseId': databaseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LogicalDatabaseResponse;
      return this.apiClient.callApi(
        '/database/{databaseId}/logicalDatabase', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
