/**
 * Qovery API
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HelmGitRepositoryRequest model module.
 * @module model/HelmGitRepositoryRequest
 * @version $(grep &#39;version&#39; _build/openapi.yaml | head -1 | tr &#39;:&#39; &#39;\n&#39; | tail -1 | tr -d &#39; &#39;)
 */
class HelmGitRepositoryRequest {
    /**
     * Constructs a new <code>HelmGitRepositoryRequest</code>.
     * @alias module:model/HelmGitRepositoryRequest
     * @param url {String} application git repository URL
     */
    constructor(url) { 
        
        HelmGitRepositoryRequest.initialize(this, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, url) { 
        obj['url'] = url;
    }

    /**
     * Constructs a <code>HelmGitRepositoryRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HelmGitRepositoryRequest} obj Optional instance to populate.
     * @return {module:model/HelmGitRepositoryRequest} The populated <code>HelmGitRepositoryRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HelmGitRepositoryRequest();

            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('branch')) {
                obj['branch'] = ApiClient.convertToType(data['branch'], 'String');
            }
            if (data.hasOwnProperty('root_path')) {
                obj['root_path'] = ApiClient.convertToType(data['root_path'], 'String');
            }
            if (data.hasOwnProperty('git_token_id')) {
                obj['git_token_id'] = ApiClient.convertToType(data['git_token_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HelmGitRepositoryRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HelmGitRepositoryRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HelmGitRepositoryRequest.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['branch'] && !(typeof data['branch'] === 'string' || data['branch'] instanceof String)) {
            throw new Error("Expected the field `branch` to be a primitive type in the JSON string but got " + data['branch']);
        }
        // ensure the json data is a string
        if (data['root_path'] && !(typeof data['root_path'] === 'string' || data['root_path'] instanceof String)) {
            throw new Error("Expected the field `root_path` to be a primitive type in the JSON string but got " + data['root_path']);
        }
        // ensure the json data is a string
        if (data['git_token_id'] && !(typeof data['git_token_id'] === 'string' || data['git_token_id'] instanceof String)) {
            throw new Error("Expected the field `git_token_id` to be a primitive type in the JSON string but got " + data['git_token_id']);
        }

        return true;
    }


}

HelmGitRepositoryRequest.RequiredProperties = ["url"];

/**
 * application git repository URL
 * @member {String} url
 */
HelmGitRepositoryRequest.prototype['url'] = undefined;

/**
 * Name of the branch to use. This is optional If not specified, then the branch used is the `main` or `master` one 
 * @member {String} branch
 */
HelmGitRepositoryRequest.prototype['branch'] = undefined;

/**
 * indicates the root path of the application.
 * @member {String} root_path
 * @default '/'
 */
HelmGitRepositoryRequest.prototype['root_path'] = '/';

/**
 * The git token id on Qovery side
 * @member {String} git_token_id
 */
HelmGitRepositoryRequest.prototype['git_token_id'] = undefined;






export default HelmGitRepositoryRequest;

