/**
 * Qovery API
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Base from './Base';
import ContainerRegistryProviderDetailsResponse from './ContainerRegistryProviderDetailsResponse';
import ContainerSource from './ContainerSource';
import Healthcheck from './Healthcheck';
import ReferenceObject from './ReferenceObject';
import ServicePort from './ServicePort';
import ServiceStorage from './ServiceStorage';
import ServiceStorageStorageInner from './ServiceStorageStorageInner';

/**
 * The ContainerResponse model module.
 * @module model/ContainerResponse
 * @version $(grep &#39;version&#39; _build/openapi.yaml | head -1 | tr &#39;:&#39; &#39;\n&#39; | tail -1 | tr -d &#39; &#39;)
 */
class ContainerResponse {
    /**
     * Constructs a new <code>ContainerResponse</code>.
     * @alias module:model/ContainerResponse
     * @implements module:model/Base
     * @implements module:model/ServiceStorage
     * @implements module:model/ContainerSource
     * @param id {String} 
     * @param createdAt {Date} 
     * @param imageName {String} The image name pattern differs according to chosen container registry provider: * `ECR`: `repository` * `SCALEWAY_CR`: `namespace/image` * `DOCKER_HUB`: `image` or `repository/image` * `PUBLIC_ECR`: `registry_alias/repository` 
     * @param tag {String} tag of the image container
     * @param registry {module:model/ContainerRegistryProviderDetailsResponse} 
     * @param environment {module:model/ReferenceObject} 
     * @param maximumCpu {Number} Maximum cpu that can be allocated to the container based on organization cluster configuration. unit is millicores (m). 1000m = 1 cpu
     * @param maximumMemory {Number} Maximum memory that can be allocated to the container based on organization cluster configuration. unit is MB. 1024 MB = 1GB
     * @param name {String} name is case insensitive
     * @param cpu {Number} unit is millicores (m). 1000m = 1 cpu
     * @param memory {Number} unit is MB. 1024 MB = 1GB
     * @param minRunningInstances {Number} Minimum number of instances running. This resource auto-scale based on the CPU and Memory consumption. Note: 0 means that there is no container running. 
     * @param maxRunningInstances {Number} Maximum number of instances running. This resource auto-scale based on the CPU and Memory consumption. Note: -1 means that there is no limit. 
     * @param healthchecks {module:model/Healthcheck} 
     * @param autoPreview {Boolean} Indicates if the 'environment preview option' is enabled for this container.   If enabled, a preview environment will be automatically cloned when `/preview` endpoint is called.   If not specified, it takes the value of the `auto_preview` property from the associated environment. 
     */
    constructor(id, createdAt, imageName, tag, registry, environment, maximumCpu, maximumMemory, name, cpu, memory, minRunningInstances, maxRunningInstances, healthchecks, autoPreview) { 
        Base.initialize(this, id, createdAt);ServiceStorage.initialize(this);ContainerSource.initialize(this, imageName, tag, registry);
        ContainerResponse.initialize(this, id, createdAt, imageName, tag, registry, environment, maximumCpu, maximumMemory, name, cpu, memory, minRunningInstances, maxRunningInstances, healthchecks, autoPreview);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, createdAt, imageName, tag, registry, environment, maximumCpu, maximumMemory, name, cpu, memory, minRunningInstances, maxRunningInstances, healthchecks, autoPreview) { 
        obj['id'] = id;
        obj['created_at'] = createdAt;
        obj['image_name'] = imageName;
        obj['tag'] = tag;
        obj['registry'] = registry;
        obj['environment'] = environment;
        obj['maximum_cpu'] = maximumCpu;
        obj['maximum_memory'] = maximumMemory;
        obj['name'] = name;
        obj['cpu'] = cpu;
        obj['memory'] = memory;
        obj['min_running_instances'] = minRunningInstances || 1;
        obj['max_running_instances'] = maxRunningInstances || 1;
        obj['healthchecks'] = healthchecks;
        obj['auto_preview'] = autoPreview;
    }

    /**
     * Constructs a <code>ContainerResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContainerResponse} obj Optional instance to populate.
     * @return {module:model/ContainerResponse} The populated <code>ContainerResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContainerResponse();
            Base.constructFromObject(data, obj);
            ServiceStorage.constructFromObject(data, obj);
            ContainerSource.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('storage')) {
                obj['storage'] = ApiClient.convertToType(data['storage'], [ServiceStorageStorageInner]);
            }
            if (data.hasOwnProperty('image_name')) {
                obj['image_name'] = ApiClient.convertToType(data['image_name'], 'String');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'String');
            }
            if (data.hasOwnProperty('registry_id')) {
                obj['registry_id'] = ApiClient.convertToType(data['registry_id'], 'String');
            }
            if (data.hasOwnProperty('registry')) {
                obj['registry'] = ContainerRegistryProviderDetailsResponse.constructFromObject(data['registry']);
            }
            if (data.hasOwnProperty('environment')) {
                obj['environment'] = ReferenceObject.constructFromObject(data['environment']);
            }
            if (data.hasOwnProperty('maximum_cpu')) {
                obj['maximum_cpu'] = ApiClient.convertToType(data['maximum_cpu'], 'Number');
            }
            if (data.hasOwnProperty('maximum_memory')) {
                obj['maximum_memory'] = ApiClient.convertToType(data['maximum_memory'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('arguments')) {
                obj['arguments'] = ApiClient.convertToType(data['arguments'], ['String']);
            }
            if (data.hasOwnProperty('entrypoint')) {
                obj['entrypoint'] = ApiClient.convertToType(data['entrypoint'], 'String');
            }
            if (data.hasOwnProperty('cpu')) {
                obj['cpu'] = ApiClient.convertToType(data['cpu'], 'Number');
            }
            if (data.hasOwnProperty('memory')) {
                obj['memory'] = ApiClient.convertToType(data['memory'], 'Number');
            }
            if (data.hasOwnProperty('min_running_instances')) {
                obj['min_running_instances'] = ApiClient.convertToType(data['min_running_instances'], 'Number');
            }
            if (data.hasOwnProperty('max_running_instances')) {
                obj['max_running_instances'] = ApiClient.convertToType(data['max_running_instances'], 'Number');
            }
            if (data.hasOwnProperty('healthchecks')) {
                obj['healthchecks'] = Healthcheck.constructFromObject(data['healthchecks']);
            }
            if (data.hasOwnProperty('auto_preview')) {
                obj['auto_preview'] = ApiClient.convertToType(data['auto_preview'], 'Boolean');
            }
            if (data.hasOwnProperty('ports')) {
                obj['ports'] = ApiClient.convertToType(data['ports'], [ServicePort]);
            }
            if (data.hasOwnProperty('auto_deploy')) {
                obj['auto_deploy'] = ApiClient.convertToType(data['auto_deploy'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContainerResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContainerResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ContainerResponse.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['storage']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['storage'])) {
                throw new Error("Expected the field `storage` to be an array in the JSON data but got " + data['storage']);
            }
            // validate the optional field `storage` (array)
            for (const item of data['storage']) {
                ServiceStorageStorageInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['image_name'] && !(typeof data['image_name'] === 'string' || data['image_name'] instanceof String)) {
            throw new Error("Expected the field `image_name` to be a primitive type in the JSON string but got " + data['image_name']);
        }
        // ensure the json data is a string
        if (data['tag'] && !(typeof data['tag'] === 'string' || data['tag'] instanceof String)) {
            throw new Error("Expected the field `tag` to be a primitive type in the JSON string but got " + data['tag']);
        }
        // ensure the json data is a string
        if (data['registry_id'] && !(typeof data['registry_id'] === 'string' || data['registry_id'] instanceof String)) {
            throw new Error("Expected the field `registry_id` to be a primitive type in the JSON string but got " + data['registry_id']);
        }
        // validate the optional field `registry`
        if (data['registry']) { // data not null
          ContainerRegistryProviderDetailsResponse.validateJSON(data['registry']);
        }
        // validate the optional field `environment`
        if (data['environment']) { // data not null
          ReferenceObject.validateJSON(data['environment']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['arguments'])) {
            throw new Error("Expected the field `arguments` to be an array in the JSON data but got " + data['arguments']);
        }
        // ensure the json data is a string
        if (data['entrypoint'] && !(typeof data['entrypoint'] === 'string' || data['entrypoint'] instanceof String)) {
            throw new Error("Expected the field `entrypoint` to be a primitive type in the JSON string but got " + data['entrypoint']);
        }
        // validate the optional field `healthchecks`
        if (data['healthchecks']) { // data not null
          Healthcheck.validateJSON(data['healthchecks']);
        }
        if (data['ports']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ports'])) {
                throw new Error("Expected the field `ports` to be an array in the JSON data but got " + data['ports']);
            }
            // validate the optional field `ports` (array)
            for (const item of data['ports']) {
                ServicePort.validateJSON(item);
            };
        }

        return true;
    }


}

ContainerResponse.RequiredProperties = ["id", "created_at", "image_name", "tag", "registry", "environment", "maximum_cpu", "maximum_memory", "name", "cpu", "memory", "min_running_instances", "max_running_instances", "healthchecks", "auto_preview"];

/**
 * @member {String} id
 */
ContainerResponse.prototype['id'] = undefined;

/**
 * @member {Date} created_at
 */
ContainerResponse.prototype['created_at'] = undefined;

/**
 * @member {Date} updated_at
 */
ContainerResponse.prototype['updated_at'] = undefined;

/**
 * @member {Array.<module:model/ServiceStorageStorageInner>} storage
 */
ContainerResponse.prototype['storage'] = undefined;

/**
 * The image name pattern differs according to chosen container registry provider: * `ECR`: `repository` * `SCALEWAY_CR`: `namespace/image` * `DOCKER_HUB`: `image` or `repository/image` * `PUBLIC_ECR`: `registry_alias/repository` 
 * @member {String} image_name
 */
ContainerResponse.prototype['image_name'] = undefined;

/**
 * tag of the image container
 * @member {String} tag
 */
ContainerResponse.prototype['tag'] = undefined;

/**
 * tag of the image container
 * @member {String} registry_id
 */
ContainerResponse.prototype['registry_id'] = undefined;

/**
 * @member {module:model/ContainerRegistryProviderDetailsResponse} registry
 */
ContainerResponse.prototype['registry'] = undefined;

/**
 * @member {module:model/ReferenceObject} environment
 */
ContainerResponse.prototype['environment'] = undefined;

/**
 * Maximum cpu that can be allocated to the container based on organization cluster configuration. unit is millicores (m). 1000m = 1 cpu
 * @member {Number} maximum_cpu
 */
ContainerResponse.prototype['maximum_cpu'] = undefined;

/**
 * Maximum memory that can be allocated to the container based on organization cluster configuration. unit is MB. 1024 MB = 1GB
 * @member {Number} maximum_memory
 */
ContainerResponse.prototype['maximum_memory'] = undefined;

/**
 * name is case insensitive
 * @member {String} name
 */
ContainerResponse.prototype['name'] = undefined;

/**
 * give a description to this container
 * @member {String} description
 */
ContainerResponse.prototype['description'] = undefined;

/**
 * @member {Array.<String>} arguments
 */
ContainerResponse.prototype['arguments'] = undefined;

/**
 * optional entrypoint when launching container
 * @member {String} entrypoint
 */
ContainerResponse.prototype['entrypoint'] = undefined;

/**
 * unit is millicores (m). 1000m = 1 cpu
 * @member {Number} cpu
 */
ContainerResponse.prototype['cpu'] = undefined;

/**
 * unit is MB. 1024 MB = 1GB
 * @member {Number} memory
 */
ContainerResponse.prototype['memory'] = undefined;

/**
 * Minimum number of instances running. This resource auto-scale based on the CPU and Memory consumption. Note: 0 means that there is no container running. 
 * @member {Number} min_running_instances
 * @default 1
 */
ContainerResponse.prototype['min_running_instances'] = 1;

/**
 * Maximum number of instances running. This resource auto-scale based on the CPU and Memory consumption. Note: -1 means that there is no limit. 
 * @member {Number} max_running_instances
 * @default 1
 */
ContainerResponse.prototype['max_running_instances'] = 1;

/**
 * @member {module:model/Healthcheck} healthchecks
 */
ContainerResponse.prototype['healthchecks'] = undefined;

/**
 * Indicates if the 'environment preview option' is enabled for this container.   If enabled, a preview environment will be automatically cloned when `/preview` endpoint is called.   If not specified, it takes the value of the `auto_preview` property from the associated environment. 
 * @member {Boolean} auto_preview
 */
ContainerResponse.prototype['auto_preview'] = undefined;

/**
 * @member {Array.<module:model/ServicePort>} ports
 */
ContainerResponse.prototype['ports'] = undefined;

/**
 * Specify if the container will be automatically updated after receiving a new image tag.  The new image tag shall be communicated via the \"Auto Deploy container\" endpoint https://api-doc.qovery.com/#tag/Containers/operation/autoDeployContainerEnvironments 
 * @member {Boolean} auto_deploy
 */
ContainerResponse.prototype['auto_deploy'] = undefined;


// Implement Base interface:
/**
 * @member {String} id
 */
Base.prototype['id'] = undefined;
/**
 * @member {Date} created_at
 */
Base.prototype['created_at'] = undefined;
/**
 * @member {Date} updated_at
 */
Base.prototype['updated_at'] = undefined;
// Implement ServiceStorage interface:
/**
 * @member {Array.<module:model/ServiceStorageStorageInner>} storage
 */
ServiceStorage.prototype['storage'] = undefined;
// Implement ContainerSource interface:
/**
 * The image name pattern differs according to chosen container registry provider: * `ECR`: `repository` * `SCALEWAY_CR`: `namespace/image` * `DOCKER_HUB`: `image` or `repository/image` * `PUBLIC_ECR`: `registry_alias/repository` 
 * @member {String} image_name
 */
ContainerSource.prototype['image_name'] = undefined;
/**
 * tag of the image container
 * @member {String} tag
 */
ContainerSource.prototype['tag'] = undefined;
/**
 * tag of the image container
 * @member {String} registry_id
 */
ContainerSource.prototype['registry_id'] = undefined;
/**
 * @member {module:model/ContainerRegistryProviderDetailsResponse} registry
 */
ContainerSource.prototype['registry'] = undefined;




export default ContainerResponse;

