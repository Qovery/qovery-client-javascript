/**
 * Qovery API
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AvailableHelmRepositoryResponseList from '../model/AvailableHelmRepositoryResponseList';
import HelmRepositoryRequest from '../model/HelmRepositoryRequest';
import HelmRepositoryResponse from '../model/HelmRepositoryResponse';
import HelmRepositoryResponseList from '../model/HelmRepositoryResponseList';

/**
* HelmRepositories service.
* @module api/HelmRepositoriesApi
* @version $(grep 'version' _build/openapi.yaml | head -1 | tr ':' '\n' | tail -1 | tr -d ' ')
*/
export default class HelmRepositoriesApi {

    /**
    * Constructs a new HelmRepositoriesApi. 
    * @alias module:api/HelmRepositoriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createHelmRepository operation.
     * @callback module:api/HelmRepositoriesApi~createHelmRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HelmRepositoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a helm repository
     * @param {String} organizationId Organization ID
     * @param {Object} opts Optional parameters
     * @param {module:model/HelmRepositoryRequest} opts.helmRepositoryRequest 
     * @param {module:api/HelmRepositoriesApi~createHelmRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HelmRepositoryResponse}
     */
    createHelmRepository(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['helmRepositoryRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createHelmRepository");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HelmRepositoryResponse;
      return this.apiClient.callApi(
        '/organization/{organizationId}/helmRepository', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteHelmRepository operation.
     * @callback module:api/HelmRepositoriesApi~deleteHelmRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a helm repository
     * @param {String} organizationId Organization ID
     * @param {module:api/HelmRepositoriesApi~deleteHelmRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteHelmRepository(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteHelmRepository");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organization/{organizationId}/helmRepository/{helmRepositoryId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editHelmRepository operation.
     * @callback module:api/HelmRepositoriesApi~editHelmRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HelmRepositoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a helm repository
     * @param {String} organizationId Organization ID
     * @param {Object} opts Optional parameters
     * @param {module:model/HelmRepositoryRequest} opts.helmRepositoryRequest 
     * @param {module:api/HelmRepositoriesApi~editHelmRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HelmRepositoryResponse}
     */
    editHelmRepository(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['helmRepositoryRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling editHelmRepository");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HelmRepositoryResponse;
      return this.apiClient.callApi(
        '/organization/{organizationId}/helmRepository/{helmRepositoryId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHelmRepository operation.
     * @callback module:api/HelmRepositoriesApi~getHelmRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HelmRepositoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a helm repository
     * @param {String} organizationId Organization ID
     * @param {String} helmRepositoryId Helm chart repository ID
     * @param {module:api/HelmRepositoriesApi~getHelmRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HelmRepositoryResponse}
     */
    getHelmRepository(organizationId, helmRepositoryId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getHelmRepository");
      }
      // verify the required parameter 'helmRepositoryId' is set
      if (helmRepositoryId === undefined || helmRepositoryId === null) {
        throw new Error("Missing the required parameter 'helmRepositoryId' when calling getHelmRepository");
      }

      let pathParams = {
        'organizationId': organizationId,
        'helmRepositoryId': helmRepositoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HelmRepositoryResponse;
      return this.apiClient.callApi(
        '/organization/{organizationId}/helmRepository/{helmRepositoryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAvailableHelmRepository operation.
     * @callback module:api/HelmRepositoriesApi~listAvailableHelmRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AvailableHelmRepositoryResponseList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List supported helm repository
     * List supported helm repository by Qovery and get the mandatory authentification configuration.
     * @param {module:api/HelmRepositoriesApi~listAvailableHelmRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AvailableHelmRepositoryResponseList}
     */
    listAvailableHelmRepository(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AvailableHelmRepositoryResponseList;
      return this.apiClient.callApi(
        '/availableHelmRepository', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listHelmRepository operation.
     * @callback module:api/HelmRepositoriesApi~listHelmRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HelmRepositoryResponseList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List organization helm repositories
     * @param {String} organizationId Organization ID
     * @param {module:api/HelmRepositoriesApi~listHelmRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HelmRepositoryResponseList}
     */
    listHelmRepository(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling listHelmRepository");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HelmRepositoryResponseList;
      return this.apiClient.callApi(
        '/organization/{organizationId}/helmRepository', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
