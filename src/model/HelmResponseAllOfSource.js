/**
 * Qovery API
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HelmResponseAllOfSourceOneOf from './HelmResponseAllOfSourceOneOf';
import HelmResponseAllOfSourceOneOf1 from './HelmResponseAllOfSourceOneOf1';
import HelmResponseAllOfSourceOneOf1Repository from './HelmResponseAllOfSourceOneOf1Repository';
import HelmResponseAllOfSourceOneOfGit from './HelmResponseAllOfSourceOneOfGit';

/**
 * The HelmResponseAllOfSource model module.
 * @module model/HelmResponseAllOfSource
 * @version $(grep &#39;version&#39; _build/openapi.yaml | head -1 | tr &#39;:&#39; &#39;\n&#39; | tail -1 | tr -d &#39; &#39;)
 */
class HelmResponseAllOfSource {
    /**
     * Constructs a new <code>HelmResponseAllOfSource</code>.
     * @alias module:model/HelmResponseAllOfSource
     * @param {(module:model/HelmResponseAllOfSourceOneOf|module:model/HelmResponseAllOfSourceOneOf1)} instance The actual instance to initialize HelmResponseAllOfSource.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "HelmResponseAllOfSourceOneOf") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                HelmResponseAllOfSourceOneOf.validateJSON(instance); // throw an exception if no match
                // create HelmResponseAllOfSourceOneOf from JS object
                this.actualInstance = HelmResponseAllOfSourceOneOf.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into HelmResponseAllOfSourceOneOf
            errorMessages.push("Failed to construct HelmResponseAllOfSourceOneOf: " + err)
        }

        try {
            if (typeof instance === "HelmResponseAllOfSourceOneOf1") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                HelmResponseAllOfSourceOneOf1.validateJSON(instance); // throw an exception if no match
                // create HelmResponseAllOfSourceOneOf1 from JS object
                this.actualInstance = HelmResponseAllOfSourceOneOf1.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into HelmResponseAllOfSourceOneOf1
            errorMessages.push("Failed to construct HelmResponseAllOfSourceOneOf1: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `HelmResponseAllOfSource` with oneOf schemas HelmResponseAllOfSourceOneOf, HelmResponseAllOfSourceOneOf1. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `HelmResponseAllOfSource` with oneOf schemas HelmResponseAllOfSourceOneOf, HelmResponseAllOfSourceOneOf1. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>HelmResponseAllOfSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HelmResponseAllOfSource} obj Optional instance to populate.
     * @return {module:model/HelmResponseAllOfSource} The populated <code>HelmResponseAllOfSource</code> instance.
     */
    static constructFromObject(data, obj) {
        return new HelmResponseAllOfSource(data);
    }

    /**
     * Gets the actual instance, which can be <code>HelmResponseAllOfSourceOneOf</code>, <code>HelmResponseAllOfSourceOneOf1</code>.
     * @return {(module:model/HelmResponseAllOfSourceOneOf|module:model/HelmResponseAllOfSourceOneOf1)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>HelmResponseAllOfSourceOneOf</code>, <code>HelmResponseAllOfSourceOneOf1</code>.
     * @param {(module:model/HelmResponseAllOfSourceOneOf|module:model/HelmResponseAllOfSourceOneOf1)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = HelmResponseAllOfSource.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of HelmResponseAllOfSource from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/HelmResponseAllOfSource} An instance of HelmResponseAllOfSource.
     */
    static fromJSON = function(json_string){
        return HelmResponseAllOfSource.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/HelmResponseAllOfSourceOneOfGit} git
 */
HelmResponseAllOfSource.prototype['git'] = undefined;

/**
 * @member {module:model/HelmResponseAllOfSourceOneOf1Repository} repository
 */
HelmResponseAllOfSource.prototype['repository'] = undefined;


HelmResponseAllOfSource.OneOf = ["HelmResponseAllOfSourceOneOf", "HelmResponseAllOfSourceOneOf1"];

export default HelmResponseAllOfSource;

