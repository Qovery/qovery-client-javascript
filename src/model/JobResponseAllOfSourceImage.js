/**
 * Qovery API
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContainerRegistryProviderDetailsResponse from './ContainerRegistryProviderDetailsResponse';

/**
 * The JobResponseAllOfSourceImage model module.
 * @module model/JobResponseAllOfSourceImage
 * @version $(grep &#39;version&#39; _build/openapi.yaml | head -1 | tr &#39;:&#39; &#39;\n&#39; | tail -1 | tr -d &#39; &#39;)
 */
class JobResponseAllOfSourceImage {
    /**
     * Constructs a new <code>JobResponseAllOfSourceImage</code>.
     * @alias module:model/JobResponseAllOfSourceImage
     * @param imageName {String} The image name pattern differs according to chosen container registry provider:   * `ECR`: `repository` * `SCALEWAY_CR`: `namespace/image` * `DOCKER_HUB`: `image` or `repository/image` * `PUBLIC_ECR`: `registry_alias/repository` 
     * @param tag {String} tag of the image container
     * @param registryId {String} tag of the image container
     * @param registry {module:model/ContainerRegistryProviderDetailsResponse} 
     */
    constructor(imageName, tag, registryId, registry) { 
        
        JobResponseAllOfSourceImage.initialize(this, imageName, tag, registryId, registry);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, imageName, tag, registryId, registry) { 
        obj['image_name'] = imageName;
        obj['tag'] = tag;
        obj['registry_id'] = registryId;
        obj['registry'] = registry;
    }

    /**
     * Constructs a <code>JobResponseAllOfSourceImage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobResponseAllOfSourceImage} obj Optional instance to populate.
     * @return {module:model/JobResponseAllOfSourceImage} The populated <code>JobResponseAllOfSourceImage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobResponseAllOfSourceImage();

            if (data.hasOwnProperty('image_name')) {
                obj['image_name'] = ApiClient.convertToType(data['image_name'], 'String');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'String');
            }
            if (data.hasOwnProperty('registry_id')) {
                obj['registry_id'] = ApiClient.convertToType(data['registry_id'], 'String');
            }
            if (data.hasOwnProperty('registry')) {
                obj['registry'] = ContainerRegistryProviderDetailsResponse.constructFromObject(data['registry']);
            }
        }
        return obj;
    }


}

/**
 * The image name pattern differs according to chosen container registry provider:   * `ECR`: `repository` * `SCALEWAY_CR`: `namespace/image` * `DOCKER_HUB`: `image` or `repository/image` * `PUBLIC_ECR`: `registry_alias/repository` 
 * @member {String} image_name
 */
JobResponseAllOfSourceImage.prototype['image_name'] = undefined;

/**
 * tag of the image container
 * @member {String} tag
 */
JobResponseAllOfSourceImage.prototype['tag'] = undefined;

/**
 * tag of the image container
 * @member {String} registry_id
 */
JobResponseAllOfSourceImage.prototype['registry_id'] = undefined;

/**
 * @member {module:model/ContainerRegistryProviderDetailsResponse} registry
 */
JobResponseAllOfSourceImage.prototype['registry'] = undefined;






export default JobResponseAllOfSourceImage;

