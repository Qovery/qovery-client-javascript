/**
 * Qovery API
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateOrganizationWebhook201Response from '../model/CreateOrganizationWebhook201Response';
import CreateOrganizationWebhookRequest from '../model/CreateOrganizationWebhookRequest';
import ListOrganizationWebHooks200Response from '../model/ListOrganizationWebHooks200Response';

/**
* OrganizationWebhook service.
* @module api/OrganizationWebhookApi
* @version $(grep 'version' _build/openapi.yaml | head -1 | tr ':' '\n' | tail -1 | tr -d ' ')
*/
export default class OrganizationWebhookApi {

    /**
    * Constructs a new OrganizationWebhookApi. 
    * @alias module:api/OrganizationWebhookApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createOrganizationWebhook operation.
     * @callback module:api/OrganizationWebhookApi~createOrganizationWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateOrganizationWebhook201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an organization webhook
     * Create an organization webhook.
     * @param {String} organizationId Organization ID
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateOrganizationWebhookRequest} opts.createOrganizationWebhookRequest 
     * @param {module:api/OrganizationWebhookApi~createOrganizationWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateOrganizationWebhook201Response}
     */
    createOrganizationWebhook(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createOrganizationWebhookRequest'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationWebhook");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateOrganizationWebhook201Response;
      return this.apiClient.callApi(
        '/organization/{organizationId}/webhook', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationWebhook operation.
     * @callback module:api/OrganizationWebhookApi~deleteOrganizationWebhookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete organization webhook
     * Delete organization webhook
     * @param {String} organizationId Organization ID
     * @param {module:api/OrganizationWebhookApi~deleteOrganizationWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationWebhook(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationWebhook");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organization/{organizationId}/webhook/{webhookId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editOrganizationWebhook operation.
     * @callback module:api/OrganizationWebhookApi~editOrganizationWebhookCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit an organization webhook
     * Edit an organization webhook
     * @param {String} organizationId Organization ID
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body 
     * @param {module:api/OrganizationWebhookApi~editOrganizationWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    editOrganizationWebhook(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling editOrganizationWebhook");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/organization/{organizationId}/webhook/{webhookId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationWebhook operation.
     * @callback module:api/OrganizationWebhookApi~getOrganizationWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateOrganizationWebhook201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an Organization webhook
     * Get an Organization webhook
     * @param {String} organizationId Organization ID
     * @param {String} webhookId Webhook ID
     * @param {module:api/OrganizationWebhookApi~getOrganizationWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateOrganizationWebhook201Response}
     */
    getOrganizationWebhook(organizationId, webhookId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationWebhook");
      }
      // verify the required parameter 'webhookId' is set
      if (webhookId === undefined || webhookId === null) {
        throw new Error("Missing the required parameter 'webhookId' when calling getOrganizationWebhook");
      }

      let pathParams = {
        'organizationId': organizationId,
        'webhookId': webhookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateOrganizationWebhook201Response;
      return this.apiClient.callApi(
        '/organization/{organizationId}/webhook/{webhookId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOrganizationWebHooks operation.
     * @callback module:api/OrganizationWebhookApi~listOrganizationWebHooksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOrganizationWebHooks200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List organization webhooks
     * List organization webhooks
     * @param {String} organizationId Organization ID
     * @param {module:api/OrganizationWebhookApi~listOrganizationWebHooksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOrganizationWebHooks200Response}
     */
    listOrganizationWebHooks(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling listOrganizationWebHooks");
      }

      let pathParams = {
        'organizationId': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListOrganizationWebHooks200Response;
      return this.apiClient.callApi(
        '/organization/{organizationId}/webhook', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
