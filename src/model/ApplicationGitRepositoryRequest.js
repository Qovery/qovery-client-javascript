/**
 * [BETA] Qovery API
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is in Beta and still in progress. Some endpoints are not available yet. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support+api+documentation@qovery.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ApplicationGitRepositoryRequest model module.
 * @module model/ApplicationGitRepositoryRequest
 * @version 1.0.0
 */
class ApplicationGitRepositoryRequest {
    /**
     * Constructs a new <code>ApplicationGitRepositoryRequest</code>.
     * @alias module:model/ApplicationGitRepositoryRequest
     * @param url {String} application git repository URL
     */
    constructor(url) { 
        
        ApplicationGitRepositoryRequest.initialize(this, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, url) { 
        obj['url'] = url;
    }

    /**
     * Constructs a <code>ApplicationGitRepositoryRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplicationGitRepositoryRequest} obj Optional instance to populate.
     * @return {module:model/ApplicationGitRepositoryRequest} The populated <code>ApplicationGitRepositoryRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplicationGitRepositoryRequest();

            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('branch')) {
                obj['branch'] = ApiClient.convertToType(data['branch'], 'String');
            }
            if (data.hasOwnProperty('root_path')) {
                obj['root_path'] = ApiClient.convertToType(data['root_path'], 'String');
            }
        }
        return obj;
    }


}

/**
 * application git repository URL
 * @member {String} url
 */
ApplicationGitRepositoryRequest.prototype['url'] = undefined;

/**
 * Name of the branch to use. This is optional If not specified, then the branch used is the `main` or `master` one 
 * @member {String} branch
 */
ApplicationGitRepositoryRequest.prototype['branch'] = undefined;

/**
 * indicates the root path of the application.
 * @member {String} root_path
 * @default '/'
 */
ApplicationGitRepositoryRequest.prototype['root_path'] = '/';






export default ApplicationGitRepositoryRequest;

