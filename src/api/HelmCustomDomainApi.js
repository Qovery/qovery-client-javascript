/**
 * Qovery API
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CustomDomain from '../model/CustomDomain';
import CustomDomainRequest from '../model/CustomDomainRequest';

/**
* HelmCustomDomain service.
* @module api/HelmCustomDomainApi
* @version $(grep 'version' _build/openapi.yaml | head -1 | tr ':' '\n' | tail -1 | tr -d ' ')
*/
export default class HelmCustomDomainApi {

    /**
    * Constructs a new HelmCustomDomainApi. 
    * @alias module:api/HelmCustomDomainApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteHelmCustomDomain operation.
     * @callback module:api/HelmCustomDomainApi~deleteHelmCustomDomainCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Custom Domain
     * To delete an CustomDomain you must have the project user permission
     * @param {String} helmId Helm ID
     * @param {String} customDomainId Custom Domain ID
     * @param {module:api/HelmCustomDomainApi~deleteHelmCustomDomainCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteHelmCustomDomain(helmId, customDomainId, callback) {
      let postBody = null;
      // verify the required parameter 'helmId' is set
      if (helmId === undefined || helmId === null) {
        throw new Error("Missing the required parameter 'helmId' when calling deleteHelmCustomDomain");
      }
      // verify the required parameter 'customDomainId' is set
      if (customDomainId === undefined || customDomainId === null) {
        throw new Error("Missing the required parameter 'customDomainId' when calling deleteHelmCustomDomain");
      }

      let pathParams = {
        'helmId': helmId,
        'customDomainId': customDomainId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/helm/{helmId}/customDomain/{customDomainId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editHelmCustomDomain operation.
     * @callback module:api/HelmCustomDomainApi~editHelmCustomDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomDomain} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a Custom Domain
     * To edit a Custom Domain you must have the project user permission
     * @param {String} helmId Helm ID
     * @param {String} customDomainId Custom Domain ID
     * @param {Object} opts Optional parameters
     * @param {module:model/CustomDomainRequest} opts.customDomainRequest 
     * @param {module:api/HelmCustomDomainApi~editHelmCustomDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomDomain}
     */
    editHelmCustomDomain(helmId, customDomainId, opts, callback) {
      opts = opts || {};
      let postBody = opts['customDomainRequest'];
      // verify the required parameter 'helmId' is set
      if (helmId === undefined || helmId === null) {
        throw new Error("Missing the required parameter 'helmId' when calling editHelmCustomDomain");
      }
      // verify the required parameter 'customDomainId' is set
      if (customDomainId === undefined || customDomainId === null) {
        throw new Error("Missing the required parameter 'customDomainId' when calling editHelmCustomDomain");
      }

      let pathParams = {
        'helmId': helmId,
        'customDomainId': customDomainId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomDomain;
      return this.apiClient.callApi(
        '/helm/{helmId}/customDomain/{customDomainId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHelmCustomDomain operation.
     * @callback module:api/HelmCustomDomainApi~getHelmCustomDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomDomain} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Custom Domain
     * Get a custom domain
     * @param {String} helmId Helm ID
     * @param {String} customDomainId Custom Domain ID
     * @param {module:api/HelmCustomDomainApi~getHelmCustomDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomDomain}
     */
    getHelmCustomDomain(helmId, customDomainId, callback) {
      let postBody = null;
      // verify the required parameter 'helmId' is set
      if (helmId === undefined || helmId === null) {
        throw new Error("Missing the required parameter 'helmId' when calling getHelmCustomDomain");
      }
      // verify the required parameter 'customDomainId' is set
      if (customDomainId === undefined || customDomainId === null) {
        throw new Error("Missing the required parameter 'customDomainId' when calling getHelmCustomDomain");
      }

      let pathParams = {
        'helmId': helmId,
        'customDomainId': customDomainId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomDomain;
      return this.apiClient.callApi(
        '/helm/{helmId}/customDomain/{customDomainId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
