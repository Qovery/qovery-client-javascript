/**
 * Qovery API
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GitProviderEnum from './GitProviderEnum';

/**
 * The ApplicationGitRepository model module.
 * @module model/ApplicationGitRepository
 * @version $(grep &#39;version&#39; _build/openapi.yaml | head -1 | tr &#39;:&#39; &#39;\n&#39; | tail -1 | tr -d &#39; &#39;)
 */
class ApplicationGitRepository {
    /**
     * Constructs a new <code>ApplicationGitRepository</code>.
     * @alias module:model/ApplicationGitRepository
     * @param provider {module:model/GitProviderEnum} 
     * @param owner {String} 
     * @param url {String} 
     * @param name {String} repository name
     */
    constructor(provider, owner, url, name) { 
        
        ApplicationGitRepository.initialize(this, provider, owner, url, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, provider, owner, url, name) { 
        obj['provider'] = provider;
        obj['owner'] = owner;
        obj['url'] = url;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>ApplicationGitRepository</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplicationGitRepository} obj Optional instance to populate.
     * @return {module:model/ApplicationGitRepository} The populated <code>ApplicationGitRepository</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplicationGitRepository();

            if (data.hasOwnProperty('has_access')) {
                obj['has_access'] = ApiClient.convertToType(data['has_access'], 'Boolean');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = GitProviderEnum.constructFromObject(data['provider']);
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('branch')) {
                obj['branch'] = ApiClient.convertToType(data['branch'], 'String');
            }
            if (data.hasOwnProperty('root_path')) {
                obj['root_path'] = ApiClient.convertToType(data['root_path'], 'String');
            }
            if (data.hasOwnProperty('deployed_commit_id')) {
                obj['deployed_commit_id'] = ApiClient.convertToType(data['deployed_commit_id'], 'String');
            }
            if (data.hasOwnProperty('deployed_commit_date')) {
                obj['deployed_commit_date'] = ApiClient.convertToType(data['deployed_commit_date'], 'Date');
            }
            if (data.hasOwnProperty('deployed_commit_contributor')) {
                obj['deployed_commit_contributor'] = ApiClient.convertToType(data['deployed_commit_contributor'], 'String');
            }
            if (data.hasOwnProperty('deployed_commit_tag')) {
                obj['deployed_commit_tag'] = ApiClient.convertToType(data['deployed_commit_tag'], 'String');
            }
            if (data.hasOwnProperty('git_token_id')) {
                obj['git_token_id'] = ApiClient.convertToType(data['git_token_id'], 'String');
            }
            if (data.hasOwnProperty('git_token_name')) {
                obj['git_token_name'] = ApiClient.convertToType(data['git_token_name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApplicationGitRepository</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApplicationGitRepository</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ApplicationGitRepository.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
            throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['branch'] && !(typeof data['branch'] === 'string' || data['branch'] instanceof String)) {
            throw new Error("Expected the field `branch` to be a primitive type in the JSON string but got " + data['branch']);
        }
        // ensure the json data is a string
        if (data['root_path'] && !(typeof data['root_path'] === 'string' || data['root_path'] instanceof String)) {
            throw new Error("Expected the field `root_path` to be a primitive type in the JSON string but got " + data['root_path']);
        }
        // ensure the json data is a string
        if (data['deployed_commit_id'] && !(typeof data['deployed_commit_id'] === 'string' || data['deployed_commit_id'] instanceof String)) {
            throw new Error("Expected the field `deployed_commit_id` to be a primitive type in the JSON string but got " + data['deployed_commit_id']);
        }
        // ensure the json data is a string
        if (data['deployed_commit_contributor'] && !(typeof data['deployed_commit_contributor'] === 'string' || data['deployed_commit_contributor'] instanceof String)) {
            throw new Error("Expected the field `deployed_commit_contributor` to be a primitive type in the JSON string but got " + data['deployed_commit_contributor']);
        }
        // ensure the json data is a string
        if (data['deployed_commit_tag'] && !(typeof data['deployed_commit_tag'] === 'string' || data['deployed_commit_tag'] instanceof String)) {
            throw new Error("Expected the field `deployed_commit_tag` to be a primitive type in the JSON string but got " + data['deployed_commit_tag']);
        }
        // ensure the json data is a string
        if (data['git_token_id'] && !(typeof data['git_token_id'] === 'string' || data['git_token_id'] instanceof String)) {
            throw new Error("Expected the field `git_token_id` to be a primitive type in the JSON string but got " + data['git_token_id']);
        }
        // ensure the json data is a string
        if (data['git_token_name'] && !(typeof data['git_token_name'] === 'string' || data['git_token_name'] instanceof String)) {
            throw new Error("Expected the field `git_token_name` to be a primitive type in the JSON string but got " + data['git_token_name']);
        }

        return true;
    }


}

ApplicationGitRepository.RequiredProperties = ["provider", "owner", "url", "name"];

/**
 * @member {Boolean} has_access
 */
ApplicationGitRepository.prototype['has_access'] = undefined;

/**
 * @member {module:model/GitProviderEnum} provider
 */
ApplicationGitRepository.prototype['provider'] = undefined;

/**
 * @member {String} owner
 */
ApplicationGitRepository.prototype['owner'] = undefined;

/**
 * @member {String} url
 */
ApplicationGitRepository.prototype['url'] = undefined;

/**
 * repository name
 * @member {String} name
 */
ApplicationGitRepository.prototype['name'] = undefined;

/**
 * @member {String} branch
 */
ApplicationGitRepository.prototype['branch'] = undefined;

/**
 * @member {String} root_path
 */
ApplicationGitRepository.prototype['root_path'] = undefined;

/**
 * Git commit ID corresponding to the deployed version of the app
 * @member {String} deployed_commit_id
 */
ApplicationGitRepository.prototype['deployed_commit_id'] = undefined;

/**
 * Git commit date corresponding to the deployed version of the app
 * @member {Date} deployed_commit_date
 */
ApplicationGitRepository.prototype['deployed_commit_date'] = undefined;

/**
 * Git commit user corresponding to the deployed version of the app
 * @member {String} deployed_commit_contributor
 */
ApplicationGitRepository.prototype['deployed_commit_contributor'] = undefined;

/**
 * @member {String} deployed_commit_tag
 */
ApplicationGitRepository.prototype['deployed_commit_tag'] = undefined;

/**
 * @member {String} git_token_id
 */
ApplicationGitRepository.prototype['git_token_id'] = undefined;

/**
 * @member {String} git_token_name
 */
ApplicationGitRepository.prototype['git_token_name'] = undefined;






export default ApplicationGitRepository;

