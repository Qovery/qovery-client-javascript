/**
 * Qovery API
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Base from './Base';
import InviteMemberRoleEnum from './InviteMemberRoleEnum';

/**
 * The Member model module.
 * @module model/Member
 * @version $(grep &#39;version&#39; _build/openapi.yaml | head -1 | tr &#39;:&#39; &#39;\n&#39; | tail -1 | tr -d &#39; &#39;)
 */
class Member {
    /**
     * Constructs a new <code>Member</code>.
     * @alias module:model/Member
     * @implements module:model/Base
     * @param id {String} 
     * @param createdAt {Date} 
     * @param email {String} 
     */
    constructor(id, createdAt, email) { 
        Base.initialize(this, id, createdAt);
        Member.initialize(this, id, createdAt, email);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, createdAt, email) { 
        obj['id'] = id;
        obj['created_at'] = createdAt;
        obj['email'] = email;
    }

    /**
     * Constructs a <code>Member</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Member} obj Optional instance to populate.
     * @return {module:model/Member} The populated <code>Member</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Member();
            Base.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nickname')) {
                obj['nickname'] = ApiClient.convertToType(data['nickname'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('profile_picture_url')) {
                obj['profile_picture_url'] = ApiClient.convertToType(data['profile_picture_url'], 'String');
            }
            if (data.hasOwnProperty('last_activity_at')) {
                obj['last_activity_at'] = ApiClient.convertToType(data['last_activity_at'], 'Date');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = InviteMemberRoleEnum.constructFromObject(data['role']);
            }
            if (data.hasOwnProperty('role_name')) {
                obj['role_name'] = ApiClient.convertToType(data['role_name'], 'String');
            }
            if (data.hasOwnProperty('role_id')) {
                obj['role_id'] = ApiClient.convertToType(data['role_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Member</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Member</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Member.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['nickname'] && !(typeof data['nickname'] === 'string' || data['nickname'] instanceof String)) {
            throw new Error("Expected the field `nickname` to be a primitive type in the JSON string but got " + data['nickname']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['profile_picture_url'] && !(typeof data['profile_picture_url'] === 'string' || data['profile_picture_url'] instanceof String)) {
            throw new Error("Expected the field `profile_picture_url` to be a primitive type in the JSON string but got " + data['profile_picture_url']);
        }
        // ensure the json data is a string
        if (data['role_name'] && !(typeof data['role_name'] === 'string' || data['role_name'] instanceof String)) {
            throw new Error("Expected the field `role_name` to be a primitive type in the JSON string but got " + data['role_name']);
        }
        // ensure the json data is a string
        if (data['role_id'] && !(typeof data['role_id'] === 'string' || data['role_id'] instanceof String)) {
            throw new Error("Expected the field `role_id` to be a primitive type in the JSON string but got " + data['role_id']);
        }

        return true;
    }


}

Member.RequiredProperties = ["id", "created_at", "email"];

/**
 * @member {String} id
 */
Member.prototype['id'] = undefined;

/**
 * @member {Date} created_at
 */
Member.prototype['created_at'] = undefined;

/**
 * @member {Date} updated_at
 */
Member.prototype['updated_at'] = undefined;

/**
 * @member {String} name
 */
Member.prototype['name'] = undefined;

/**
 * @member {String} nickname
 */
Member.prototype['nickname'] = undefined;

/**
 * @member {String} email
 */
Member.prototype['email'] = undefined;

/**
 * @member {String} profile_picture_url
 */
Member.prototype['profile_picture_url'] = undefined;

/**
 * last time the user was connected
 * @member {Date} last_activity_at
 */
Member.prototype['last_activity_at'] = undefined;

/**
 * @member {module:model/InviteMemberRoleEnum} role
 */
Member.prototype['role'] = undefined;

/**
 * the role linked to the user
 * @member {String} role_name
 */
Member.prototype['role_name'] = undefined;

/**
 * @member {String} role_id
 */
Member.prototype['role_id'] = undefined;


// Implement Base interface:
/**
 * @member {String} id
 */
Base.prototype['id'] = undefined;
/**
 * @member {Date} created_at
 */
Base.prototype['created_at'] = undefined;
/**
 * @member {Date} updated_at
 */
Base.prototype['updated_at'] = undefined;




export default Member;

