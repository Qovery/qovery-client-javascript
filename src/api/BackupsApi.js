/**
 * [BETA] Qovery API
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is in Beta and still in progress. Some endpoints are not available yet. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support+api+documentation@qovery.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BackupPaginatedResponseList from '../model/BackupPaginatedResponseList';
import BackupRequest from '../model/BackupRequest';
import BackupResponse from '../model/BackupResponse';

/**
* Backups service.
* @module api/BackupsApi
* @version 1.0.0
*/
export default class BackupsApi {

    /**
    * Constructs a new BackupsApi. 
    * @alias module:api/BackupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addBackupDatabase operation.
     * @callback module:api/BackupsApi~addBackupDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a backup to the Database 
     * @param {String} databaseId Database ID
     * @param {Object} opts Optional parameters
     * @param {module:model/BackupRequest} opts.backupRequest 
     * @param {module:api/BackupsApi~addBackupDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupResponse}
     */
    addBackupDatabase(databaseId, opts, callback) {
      opts = opts || {};
      let postBody = opts['backupRequest'];
      // verify the required parameter 'databaseId' is set
      if (databaseId === undefined || databaseId === null) {
        throw new Error("Missing the required parameter 'databaseId' when calling addBackupDatabase");
      }

      let pathParams = {
        'databaseId': databaseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BackupResponse;
      return this.apiClient.callApi(
        '/database/{databaseId}/backup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDatabaseBackup operation.
     * @callback module:api/BackupsApi~listDatabaseBackupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupPaginatedResponseList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List database  backups
     * By default it returns the 20 last results. The response is paginated. In order to request the next page, you can use the startId query parameter
     * @param {String} databaseId Database ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.startId Starting point after which to return results
     * @param {module:api/BackupsApi~listDatabaseBackupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupPaginatedResponseList}
     */
    listDatabaseBackup(databaseId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'databaseId' is set
      if (databaseId === undefined || databaseId === null) {
        throw new Error("Missing the required parameter 'databaseId' when calling listDatabaseBackup");
      }

      let pathParams = {
        'databaseId': databaseId
      };
      let queryParams = {
        'startId': opts['startId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BackupPaginatedResponseList;
      return this.apiClient.callApi(
        '/database/{databaseId}/backup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeDatabaseBackup operation.
     * @callback module:api/BackupsApi~removeDatabaseBackupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove database  backup
     * @param {String} databaseId Database ID
     * @param {String} backupId Database Backup ID
     * @param {module:api/BackupsApi~removeDatabaseBackupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeDatabaseBackup(databaseId, backupId, callback) {
      let postBody = null;
      // verify the required parameter 'databaseId' is set
      if (databaseId === undefined || databaseId === null) {
        throw new Error("Missing the required parameter 'databaseId' when calling removeDatabaseBackup");
      }
      // verify the required parameter 'backupId' is set
      if (backupId === undefined || backupId === null) {
        throw new Error("Missing the required parameter 'backupId' when calling removeDatabaseBackup");
      }

      let pathParams = {
        'databaseId': databaseId,
        'backupId': backupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/database/{databaseId}/backup/{backupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
