/**
 * Qovery API
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The JobAdvancedSettings model module.
 * @module model/JobAdvancedSettings
 * @version $(grep &#39;version&#39; _build/openapi.yaml | head -1 | tr &#39;:&#39; &#39;\n&#39; | tail -1 | tr -d &#39; &#39;)
 */
class JobAdvancedSettings {
    /**
     * Constructs a new <code>JobAdvancedSettings</code>.
     * @alias module:model/JobAdvancedSettings
     */
    constructor() { 
        
        JobAdvancedSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JobAdvancedSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobAdvancedSettings} obj Optional instance to populate.
     * @return {module:model/JobAdvancedSettings} The populated <code>JobAdvancedSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobAdvancedSettings();

            if (data.hasOwnProperty('deployment.termination_grace_period_seconds')) {
                obj['deployment.termination_grace_period_seconds'] = ApiClient.convertToType(data['deployment.termination_grace_period_seconds'], 'Number');
            }
            if (data.hasOwnProperty('job.delete_ttl_seconds_after_finished')) {
                obj['job.delete_ttl_seconds_after_finished'] = ApiClient.convertToType(data['job.delete_ttl_seconds_after_finished'], 'Number');
            }
            if (data.hasOwnProperty('cronjob.concurrency_policy')) {
                obj['cronjob.concurrency_policy'] = ApiClient.convertToType(data['cronjob.concurrency_policy'], 'String');
            }
            if (data.hasOwnProperty('cronjob.failed_jobs_history_limit')) {
                obj['cronjob.failed_jobs_history_limit'] = ApiClient.convertToType(data['cronjob.failed_jobs_history_limit'], 'Number');
            }
            if (data.hasOwnProperty('cronjob.success_jobs_history_limit')) {
                obj['cronjob.success_jobs_history_limit'] = ApiClient.convertToType(data['cronjob.success_jobs_history_limit'], 'Number');
            }
            if (data.hasOwnProperty('readiness_probe.type')) {
                obj['readiness_probe.type'] = ApiClient.convertToType(data['readiness_probe.type'], 'String');
            }
            if (data.hasOwnProperty('readiness_probe.http_get.path')) {
                obj['readiness_probe.http_get.path'] = ApiClient.convertToType(data['readiness_probe.http_get.path'], 'String');
            }
            if (data.hasOwnProperty('readiness_probe.initial_delay_seconds')) {
                obj['readiness_probe.initial_delay_seconds'] = ApiClient.convertToType(data['readiness_probe.initial_delay_seconds'], 'Number');
            }
            if (data.hasOwnProperty('readiness_probe.period_seconds')) {
                obj['readiness_probe.period_seconds'] = ApiClient.convertToType(data['readiness_probe.period_seconds'], 'Number');
            }
            if (data.hasOwnProperty('readiness_probe.timeout_seconds')) {
                obj['readiness_probe.timeout_seconds'] = ApiClient.convertToType(data['readiness_probe.timeout_seconds'], 'Number');
            }
            if (data.hasOwnProperty('readiness_probe.success_threshold')) {
                obj['readiness_probe.success_threshold'] = ApiClient.convertToType(data['readiness_probe.success_threshold'], 'Number');
            }
            if (data.hasOwnProperty('readiness_probe.failure_threshold')) {
                obj['readiness_probe.failure_threshold'] = ApiClient.convertToType(data['readiness_probe.failure_threshold'], 'Number');
            }
            if (data.hasOwnProperty('liveness_probe.type')) {
                obj['liveness_probe.type'] = ApiClient.convertToType(data['liveness_probe.type'], 'String');
            }
            if (data.hasOwnProperty('liveness_probe.http_get.path')) {
                obj['liveness_probe.http_get.path'] = ApiClient.convertToType(data['liveness_probe.http_get.path'], 'String');
            }
            if (data.hasOwnProperty('liveness_probe.initial_delay_seconds')) {
                obj['liveness_probe.initial_delay_seconds'] = ApiClient.convertToType(data['liveness_probe.initial_delay_seconds'], 'Number');
            }
            if (data.hasOwnProperty('liveness_probe.period_seconds')) {
                obj['liveness_probe.period_seconds'] = ApiClient.convertToType(data['liveness_probe.period_seconds'], 'Number');
            }
            if (data.hasOwnProperty('liveness_probe.timeout_seconds')) {
                obj['liveness_probe.timeout_seconds'] = ApiClient.convertToType(data['liveness_probe.timeout_seconds'], 'Number');
            }
            if (data.hasOwnProperty('liveness_probe.success_threshold')) {
                obj['liveness_probe.success_threshold'] = ApiClient.convertToType(data['liveness_probe.success_threshold'], 'Number');
            }
            if (data.hasOwnProperty('liveness_probe.failure_threshold')) {
                obj['liveness_probe.failure_threshold'] = ApiClient.convertToType(data['liveness_probe.failure_threshold'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * define how long in seconds an application is supposed to be stopped gracefully
 * @member {Number} deployment.termination_grace_period_seconds
 * @default 60
 */
JobAdvancedSettings.prototype['deployment.termination_grace_period_seconds'] = 60;

/**
 * @member {Number} job.delete_ttl_seconds_after_finished
 */
JobAdvancedSettings.prototype['job.delete_ttl_seconds_after_finished'] = undefined;

/**
 * @member {String} cronjob.concurrency_policy
 * @default 'Forbid'
 */
JobAdvancedSettings.prototype['cronjob.concurrency_policy'] = 'Forbid';

/**
 * @member {Number} cronjob.failed_jobs_history_limit
 * @default 1
 */
JobAdvancedSettings.prototype['cronjob.failed_jobs_history_limit'] = 1;

/**
 * @member {Number} cronjob.success_jobs_history_limit
 * @default 1
 */
JobAdvancedSettings.prototype['cronjob.success_jobs_history_limit'] = 1;

/**
 * `NONE` disable readiness probe `TCP` enable TCP readiness probe `HTTP` enable HTTP readiness probe 
 * @member {module:model/JobAdvancedSettings.ReadinessProbeTypeEnum} readiness_probe.type
 * @default 'NONE'
 */
JobAdvancedSettings.prototype['readiness_probe.type'] = 'NONE';

/**
 * HTTP GET path to check status (must returns 2xx E.g \"/healtz\") - only usable with TYPE = HTTP
 * @member {String} readiness_probe.http_get.path
 * @default ''
 */
JobAdvancedSettings.prototype['readiness_probe.http_get.path'] = '';

/**
 * Delay before liveness probe is initiated
 * @member {Number} readiness_probe.initial_delay_seconds
 * @default 0
 */
JobAdvancedSettings.prototype['readiness_probe.initial_delay_seconds'] = 0;

/**
 * How often to perform the probe
 * @member {Number} readiness_probe.period_seconds
 * @default 0
 */
JobAdvancedSettings.prototype['readiness_probe.period_seconds'] = 0;

/**
 * When the probe times out
 * @member {Number} readiness_probe.timeout_seconds
 * @default 0
 */
JobAdvancedSettings.prototype['readiness_probe.timeout_seconds'] = 0;

/**
 * Minimum consecutive successes for the probe to be considered successful after having failed.
 * @member {Number} readiness_probe.success_threshold
 * @default 0
 */
JobAdvancedSettings.prototype['readiness_probe.success_threshold'] = 0;

/**
 * Minimum consecutive failures for the probe to be considered failed after having succeeded.
 * @member {Number} readiness_probe.failure_threshold
 * @default 0
 */
JobAdvancedSettings.prototype['readiness_probe.failure_threshold'] = 0;

/**
 * `NONE` disable liveness probe `TCP` enable TCP liveness probe `HTTP` enable HTTP liveness probe 
 * @member {module:model/JobAdvancedSettings.LivenessProbeTypeEnum} liveness_probe.type
 * @default 'NONE'
 */
JobAdvancedSettings.prototype['liveness_probe.type'] = 'NONE';

/**
 * HTTP GET path to check status (must returns 2xx E.g \"/healtz\") - only usable with TYPE = HTTP
 * @member {String} liveness_probe.http_get.path
 * @default ''
 */
JobAdvancedSettings.prototype['liveness_probe.http_get.path'] = '';

/**
 * Delay before liveness probe is initiated
 * @member {Number} liveness_probe.initial_delay_seconds
 * @default 0
 */
JobAdvancedSettings.prototype['liveness_probe.initial_delay_seconds'] = 0;

/**
 * How often to perform the probe
 * @member {Number} liveness_probe.period_seconds
 * @default 0
 */
JobAdvancedSettings.prototype['liveness_probe.period_seconds'] = 0;

/**
 * When the probe times out
 * @member {Number} liveness_probe.timeout_seconds
 * @default 0
 */
JobAdvancedSettings.prototype['liveness_probe.timeout_seconds'] = 0;

/**
 * Minimum consecutive successes for the probe to be considered successful after having failed.
 * @member {Number} liveness_probe.success_threshold
 * @default 0
 */
JobAdvancedSettings.prototype['liveness_probe.success_threshold'] = 0;

/**
 * Minimum consecutive failures for the probe to be considered failed after having succeeded.
 * @member {Number} liveness_probe.failure_threshold
 * @default 0
 */
JobAdvancedSettings.prototype['liveness_probe.failure_threshold'] = 0;





/**
 * Allowed values for the <code>readiness_probe.type</code> property.
 * @enum {String}
 * @readonly
 */
JobAdvancedSettings['ReadinessProbeTypeEnum'] = {

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "TCP"
     * @const
     */
    "TCP": "TCP",

    /**
     * value: "HTTP"
     * @const
     */
    "HTTP": "HTTP"
};


/**
 * Allowed values for the <code>liveness_probe.type</code> property.
 * @enum {String}
 * @readonly
 */
JobAdvancedSettings['LivenessProbeTypeEnum'] = {

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "TCP"
     * @const
     */
    "TCP": "TCP",

    /**
     * value: "HTTP"
     * @const
     */
    "HTTP": "HTTP"
};



export default JobAdvancedSettings;

