/**
 * Qovery API
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Base from './Base';
import CustomDomainAllOf from './CustomDomainAllOf';
import CustomDomainRequest from './CustomDomainRequest';
import CustomDomainStatusEnum from './CustomDomainStatusEnum';

/**
 * The CustomDomain model module.
 * @module model/CustomDomain
 * @version $(grep &#39;version&#39; _build/openapi.yaml | head -1 | tr &#39;:&#39; &#39;\n&#39; | tail -1 | tr -d &#39; &#39;)
 */
class CustomDomain {
    /**
     * Constructs a new <code>CustomDomain</code>.
     * @alias module:model/CustomDomain
     * @implements module:model/Base
     * @implements module:model/CustomDomainRequest
     * @implements module:model/CustomDomainAllOf
     * @param id {String} 
     * @param createdAt {Date} 
     * @param domain {String} your custom domain
     * @param generateCertificate {Boolean} to control if a certificate has to be generated for this custom domain by Qovery. The default value is `true`. This flag should be set to `false` if a CDN or other entities are managing the certificate for the specified domain and the traffic is proxied by the CDN to Qovery.
     */
    constructor(id, createdAt, domain, generateCertificate) { 
        Base.initialize(this, id, createdAt);CustomDomainRequest.initialize(this, domain, generateCertificate);CustomDomainAllOf.initialize(this);
        CustomDomain.initialize(this, id, createdAt, domain, generateCertificate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, createdAt, domain, generateCertificate) { 
        obj['id'] = id;
        obj['created_at'] = createdAt;
        obj['domain'] = domain;
        obj['generate_certificate'] = generateCertificate;
    }

    /**
     * Constructs a <code>CustomDomain</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomDomain} obj Optional instance to populate.
     * @return {module:model/CustomDomain} The populated <code>CustomDomain</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomDomain();
            Base.constructFromObject(data, obj);
            CustomDomainRequest.constructFromObject(data, obj);
            CustomDomainAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('generate_certificate')) {
                obj['generate_certificate'] = ApiClient.convertToType(data['generate_certificate'], 'Boolean');
            }
            if (data.hasOwnProperty('validation_domain')) {
                obj['validation_domain'] = ApiClient.convertToType(data['validation_domain'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = CustomDomainStatusEnum.constructFromObject(data['status']);
            }
        }
        return obj;
    }


}

/**
 * @member {String} id
 */
CustomDomain.prototype['id'] = undefined;

/**
 * @member {Date} created_at
 */
CustomDomain.prototype['created_at'] = undefined;

/**
 * @member {Date} updated_at
 */
CustomDomain.prototype['updated_at'] = undefined;

/**
 * your custom domain
 * @member {String} domain
 */
CustomDomain.prototype['domain'] = undefined;

/**
 * to control if a certificate has to be generated for this custom domain by Qovery. The default value is `true`. This flag should be set to `false` if a CDN or other entities are managing the certificate for the specified domain and the traffic is proxied by the CDN to Qovery.
 * @member {Boolean} generate_certificate
 */
CustomDomain.prototype['generate_certificate'] = undefined;

/**
 * URL provided by Qovery. You must create a CNAME on your DNS provider using that URL
 * @member {String} validation_domain
 */
CustomDomain.prototype['validation_domain'] = undefined;

/**
 * @member {module:model/CustomDomainStatusEnum} status
 */
CustomDomain.prototype['status'] = undefined;


// Implement Base interface:
/**
 * @member {String} id
 */
Base.prototype['id'] = undefined;
/**
 * @member {Date} created_at
 */
Base.prototype['created_at'] = undefined;
/**
 * @member {Date} updated_at
 */
Base.prototype['updated_at'] = undefined;
// Implement CustomDomainRequest interface:
/**
 * your custom domain
 * @member {String} domain
 */
CustomDomainRequest.prototype['domain'] = undefined;
/**
 * to control if a certificate has to be generated for this custom domain by Qovery. The default value is `true`. This flag should be set to `false` if a CDN or other entities are managing the certificate for the specified domain and the traffic is proxied by the CDN to Qovery.
 * @member {Boolean} generate_certificate
 */
CustomDomainRequest.prototype['generate_certificate'] = undefined;
// Implement CustomDomainAllOf interface:
/**
 * URL provided by Qovery. You must create a CNAME on your DNS provider using that URL
 * @member {String} validation_domain
 */
CustomDomainAllOf.prototype['validation_domain'] = undefined;
/**
 * @member {module:model/CustomDomainStatusEnum} status
 */
CustomDomainAllOf.prototype['status'] = undefined;
/**
 * to control if a certificate has to be generated for this custom domain by Qovery. The default value is `true`. This flag should be set to `false` if a CDN or other entities are managing the certificate for the specified domain and the traffic is proxied by the CDN to Qovery.
 * @member {Boolean} generate_certificate
 */
CustomDomainAllOf.prototype['generate_certificate'] = undefined;




export default CustomDomain;

