/**
 * Qovery API
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Database from '../model/Database';
import DatabaseResponseList from '../model/DatabaseResponseList';
import LogicalDatabase from '../model/LogicalDatabase';
import LogicalDatabaseResponseList from '../model/LogicalDatabaseResponseList';

/**
* ApplicationDatabase service.
* @module api/ApplicationDatabaseApi
* @version $(grep 'version' _build/openapi.yaml | head -1 | tr ':' '\n' | tail -1 | tr -d ' ')
*/
export default class ApplicationDatabaseApi {

    /**
    * Constructs a new ApplicationDatabaseApi. 
    * @alias module:api/ApplicationDatabaseApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the attachDatabasetoApplication operation.
     * @callback module:api/ApplicationDatabaseApi~attachDatabasetoApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Database} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Link a database to the application
     * @param {String} applicationId Application ID
     * @param {String} targetDatabaseId Target database ID
     * @param {module:api/ApplicationDatabaseApi~attachDatabasetoApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Database}
     */
    attachDatabasetoApplication(applicationId, targetDatabaseId, callback) {
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling attachDatabasetoApplication");
      }
      // verify the required parameter 'targetDatabaseId' is set
      if (targetDatabaseId === undefined || targetDatabaseId === null) {
        throw new Error("Missing the required parameter 'targetDatabaseId' when calling attachDatabasetoApplication");
      }

      let pathParams = {
        'applicationId': applicationId,
        'targetDatabaseId': targetDatabaseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Database;
      return this.apiClient.callApi(
        '/application/{applicationId}/database/{targetDatabaseId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attachLogicalDatabasetoApplication operation.
     * @callback module:api/ApplicationDatabaseApi~attachLogicalDatabasetoApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogicalDatabase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Link a logical database to the application
     * @param {String} applicationId Application ID
     * @param {String} targetLogicalDatabaseId Target database ID
     * @param {module:api/ApplicationDatabaseApi~attachLogicalDatabasetoApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogicalDatabase}
     */
    attachLogicalDatabasetoApplication(applicationId, targetLogicalDatabaseId, callback) {
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling attachLogicalDatabasetoApplication");
      }
      // verify the required parameter 'targetLogicalDatabaseId' is set
      if (targetLogicalDatabaseId === undefined || targetLogicalDatabaseId === null) {
        throw new Error("Missing the required parameter 'targetLogicalDatabaseId' when calling attachLogicalDatabasetoApplication");
      }

      let pathParams = {
        'applicationId': applicationId,
        'targetLogicalDatabaseId': targetLogicalDatabaseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LogicalDatabase;
      return this.apiClient.callApi(
        '/application/{applicationId}/logicalDatabase/{targetLogicalDatabaseId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApplicationDatabase operation.
     * @callback module:api/ApplicationDatabaseApi~listApplicationDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseResponseList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List linked databases
     * @param {String} applicationId Application ID
     * @param {module:api/ApplicationDatabaseApi~listApplicationDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseResponseList}
     */
    listApplicationDatabase(applicationId, callback) {
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling listApplicationDatabase");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseResponseList;
      return this.apiClient.callApi(
        '/application/{applicationId}/database', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApplicationLogicalDatabase operation.
     * @callback module:api/ApplicationDatabaseApi~listApplicationLogicalDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogicalDatabaseResponseList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List linked logical databases
     * @param {String} applicationId Application ID
     * @param {module:api/ApplicationDatabaseApi~listApplicationLogicalDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogicalDatabaseResponseList}
     */
    listApplicationLogicalDatabase(applicationId, callback) {
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling listApplicationLogicalDatabase");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LogicalDatabaseResponseList;
      return this.apiClient.callApi(
        '/application/{applicationId}/logicalDatabase', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeDatabaseFromApplication operation.
     * @callback module:api/ApplicationDatabaseApi~removeDatabaseFromApplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove database link to this application.
     * @param {String} applicationId Application ID
     * @param {String} targetDatabaseId Target database ID
     * @param {module:api/ApplicationDatabaseApi~removeDatabaseFromApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeDatabaseFromApplication(applicationId, targetDatabaseId, callback) {
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling removeDatabaseFromApplication");
      }
      // verify the required parameter 'targetDatabaseId' is set
      if (targetDatabaseId === undefined || targetDatabaseId === null) {
        throw new Error("Missing the required parameter 'targetDatabaseId' when calling removeDatabaseFromApplication");
      }

      let pathParams = {
        'applicationId': applicationId,
        'targetDatabaseId': targetDatabaseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/application/{applicationId}/database/{targetDatabaseId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeLogicalDatabaseFromApplication operation.
     * @callback module:api/ApplicationDatabaseApi~removeLogicalDatabaseFromApplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove logical database link to this application.
     * @param {String} applicationId Application ID
     * @param {String} targetLogicalDatabaseId Target database ID
     * @param {module:api/ApplicationDatabaseApi~removeLogicalDatabaseFromApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeLogicalDatabaseFromApplication(applicationId, targetLogicalDatabaseId, callback) {
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling removeLogicalDatabaseFromApplication");
      }
      // verify the required parameter 'targetLogicalDatabaseId' is set
      if (targetLogicalDatabaseId === undefined || targetLogicalDatabaseId === null) {
        throw new Error("Missing the required parameter 'targetLogicalDatabaseId' when calling removeLogicalDatabaseFromApplication");
      }

      let pathParams = {
        'applicationId': applicationId,
        'targetLogicalDatabaseId': targetLogicalDatabaseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/application/{applicationId}/logicalDatabase/{targetLogicalDatabaseId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
