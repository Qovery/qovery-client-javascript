/**
 * Qovery API
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaseJobResponseAllOfSourceOneOf from './BaseJobResponseAllOfSourceOneOf';
import BaseJobResponseAllOfSourceOneOf1 from './BaseJobResponseAllOfSourceOneOf1';
import BaseJobResponseAllOfSourceOneOf1Docker from './BaseJobResponseAllOfSourceOneOf1Docker';
import ContainerSource from './ContainerSource';

/**
 * The BaseJobResponseAllOfSource model module.
 * @module model/BaseJobResponseAllOfSource
 * @version $(grep &#39;version&#39; _build/openapi.yaml | head -1 | tr &#39;:&#39; &#39;\n&#39; | tail -1 | tr -d &#39; &#39;)
 */
class BaseJobResponseAllOfSource {
    /**
     * Constructs a new <code>BaseJobResponseAllOfSource</code>.
     * @alias module:model/BaseJobResponseAllOfSource
     * @param {(module:model/BaseJobResponseAllOfSourceOneOf|module:model/BaseJobResponseAllOfSourceOneOf1)} instance The actual instance to initialize BaseJobResponseAllOfSource.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "BaseJobResponseAllOfSourceOneOf") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                BaseJobResponseAllOfSourceOneOf.validateJSON(instance); // throw an exception if no match
                // create BaseJobResponseAllOfSourceOneOf from JS object
                this.actualInstance = BaseJobResponseAllOfSourceOneOf.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into BaseJobResponseAllOfSourceOneOf
            errorMessages.push("Failed to construct BaseJobResponseAllOfSourceOneOf: " + err)
        }

        try {
            if (typeof instance === "BaseJobResponseAllOfSourceOneOf1") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                BaseJobResponseAllOfSourceOneOf1.validateJSON(instance); // throw an exception if no match
                // create BaseJobResponseAllOfSourceOneOf1 from JS object
                this.actualInstance = BaseJobResponseAllOfSourceOneOf1.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into BaseJobResponseAllOfSourceOneOf1
            errorMessages.push("Failed to construct BaseJobResponseAllOfSourceOneOf1: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `BaseJobResponseAllOfSource` with oneOf schemas BaseJobResponseAllOfSourceOneOf, BaseJobResponseAllOfSourceOneOf1. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `BaseJobResponseAllOfSource` with oneOf schemas BaseJobResponseAllOfSourceOneOf, BaseJobResponseAllOfSourceOneOf1. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>BaseJobResponseAllOfSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BaseJobResponseAllOfSource} obj Optional instance to populate.
     * @return {module:model/BaseJobResponseAllOfSource} The populated <code>BaseJobResponseAllOfSource</code> instance.
     */
    static constructFromObject(data, obj) {
        return new BaseJobResponseAllOfSource(data);
    }

    /**
     * Gets the actual instance, which can be <code>BaseJobResponseAllOfSourceOneOf</code>, <code>BaseJobResponseAllOfSourceOneOf1</code>.
     * @return {(module:model/BaseJobResponseAllOfSourceOneOf|module:model/BaseJobResponseAllOfSourceOneOf1)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>BaseJobResponseAllOfSourceOneOf</code>, <code>BaseJobResponseAllOfSourceOneOf1</code>.
     * @param {(module:model/BaseJobResponseAllOfSourceOneOf|module:model/BaseJobResponseAllOfSourceOneOf1)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = BaseJobResponseAllOfSource.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of BaseJobResponseAllOfSource from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/BaseJobResponseAllOfSource} An instance of BaseJobResponseAllOfSource.
     */
    static fromJSON = function(json_string){
        return BaseJobResponseAllOfSource.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/ContainerSource} image
 */
BaseJobResponseAllOfSource.prototype['image'] = undefined;

/**
 * @member {module:model/BaseJobResponseAllOfSourceOneOf1Docker} docker
 */
BaseJobResponseAllOfSource.prototype['docker'] = undefined;


BaseJobResponseAllOfSource.OneOf = ["BaseJobResponseAllOfSourceOneOf", "BaseJobResponseAllOfSourceOneOf1"];

export default BaseJobResponseAllOfSource;

