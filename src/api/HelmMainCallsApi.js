/**
 * Qovery API
 * - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: support+api+documentation@qovery.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HelmRequest from '../model/HelmRequest';
import HelmResponse from '../model/HelmResponse';
import Status from '../model/Status';

/**
* HelmMainCalls service.
* @module api/HelmMainCallsApi
* @version $(grep 'version' _build/openapi.yaml | head -1 | tr ':' '\n' | tail -1 | tr -d ' ')
*/
export default class HelmMainCallsApi {

    /**
    * Constructs a new HelmMainCallsApi. 
    * @alias module:api/HelmMainCallsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteHelm operation.
     * @callback module:api/HelmMainCallsApi~deleteHelmCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete helm
     * To delete the helm you must have the admin permission
     * @param {String} helmId Helm ID
     * @param {module:api/HelmMainCallsApi~deleteHelmCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteHelm(helmId, callback) {
      let postBody = null;
      // verify the required parameter 'helmId' is set
      if (helmId === undefined || helmId === null) {
        throw new Error("Missing the required parameter 'helmId' when calling deleteHelm");
      }

      let pathParams = {
        'helmId': helmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/helm/{helmId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editHelm operation.
     * @callback module:api/HelmMainCallsApi~editHelmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HelmResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit helm
     * - To edit the helm you must have the admin permission. 
     * @param {String} helmId Helm ID
     * @param {Object} opts Optional parameters
     * @param {module:model/HelmRequest} opts.helmRequest 
     * @param {module:api/HelmMainCallsApi~editHelmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HelmResponse}
     */
    editHelm(helmId, opts, callback) {
      opts = opts || {};
      let postBody = opts['helmRequest'];
      // verify the required parameter 'helmId' is set
      if (helmId === undefined || helmId === null) {
        throw new Error("Missing the required parameter 'helmId' when calling editHelm");
      }

      let pathParams = {
        'helmId': helmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HelmResponse;
      return this.apiClient.callApi(
        '/helm/{helmId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHelm operation.
     * @callback module:api/HelmMainCallsApi~getHelmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HelmResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get helm by ID
     * @param {String} helmId Helm ID
     * @param {module:api/HelmMainCallsApi~getHelmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HelmResponse}
     */
    getHelm(helmId, callback) {
      let postBody = null;
      // verify the required parameter 'helmId' is set
      if (helmId === undefined || helmId === null) {
        throw new Error("Missing the required parameter 'helmId' when calling getHelm");
      }

      let pathParams = {
        'helmId': helmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HelmResponse;
      return this.apiClient.callApi(
        '/helm/{helmId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHelmStatus operation.
     * @callback module:api/HelmMainCallsApi~getHelmStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get helm status
     * @param {String} helmId Helm ID
     * @param {module:api/HelmMainCallsApi~getHelmStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Status}
     */
    getHelmStatus(helmId, callback) {
      let postBody = null;
      // verify the required parameter 'helmId' is set
      if (helmId === undefined || helmId === null) {
        throw new Error("Missing the required parameter 'helmId' when calling getHelmStatus");
      }

      let pathParams = {
        'helmId': helmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Status;
      return this.apiClient.callApi(
        '/helm/{helmId}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
